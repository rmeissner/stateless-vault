{"version":3,"sources":["../../../src/utils/signatures.ts","../../../src/utils/ipfs.ts","../../src/index.ts","../../../src/utils/proof.ts","utils/config.ts","components/WalletInfo.tsx","logic/ethereumRepository.ts","logic/vaultRepository.ts","components/vault/transactions/VaultTransactions.tsx","components/vault/transactions/VaultTransactionDetails.tsx","components/vault/settings/AddVaultDialog.tsx","components/vault/settings/VaultSettings.tsx","components/vault/settings/VaultSelectionDialog.tsx","components/vault/VaultHome.tsx","assets/icons/yacate-logo.svg","utils/general.ts","components/onboarding/Welcome.tsx","components/App.tsx","styles/global.ts","Root.tsx","serviceWorkerRegistraction.ts","index.tsx"],"names":["prepareEthSignSignatureForSafe","signature","replace","chunk","e","right","config","chainName","1","4","100","parseInt","process","AccountInfo","address","className","textColor","hash","textSize","showCopyBtn","showIdenticon","showEtherscanBtn","shortenHash","network","localProvider","providers","JsonRpcProvider","url","VAULTS_STORAGE_KEY","SELECTED_VAULT_STORAGE_KEY","STORAGE_IPFS_CACHE_PREFIX","ipfs","IpfsClient","host","port","protocol","loadVaultStorage","stored","localStorage","getItem","holder","JSON","parse","version","Error","value","writeVaultStorage","vaults","setItem","stringify","loadLastSelectedVault","a","store","undefined","managesVault","removeLastSelectedVault","removeItem","setLastSelectedVault","loadVaults","Object","keys","sort","map","name","console","log","setVault","removeVault","getVaultInstance","utils","isAddress","Vault","cachedLoader","key","encoding","cached","error","pullWithKeccak","loadTransactionDetails","vault","vaultHash","fetchTxByHash","styles","createStyles","list","item","display","withStyles","classes","React","transactions","setTransactions","loadTransactions","listItems","tx","action","ListItem","Box","textOverflow","overflow","txHash","success","to","location","pathname","nonce","toString","ethereumHash","length","List","Typography","details","flex","data","overflowWrap","maxWidth","justifyContent","history","useHistory","useParams","setDetails","loadDetails","goBack","WalletInfo","formatEther","meta","operation","minAvailableGas","remove","margin","open","onClose","vaultName","setVaultName","vaultAddress","setVaultAddress","inputError","setInputError","addVault","cleanAddress","getAddress","push","Dialog","scroll","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","dividers","DialogContentText","tabIndex","TextField","label","onChange","target","helperText","DialogActions","Button","onClick","color","content","configuration","setConfiguration","loadConfig","threshold","signers","signer","implementation","onAdd","setVaults","select","init","Delete","title","toolbar","background","paddingBottom","navigation","height","position","bottom","width","VaultHomeContainer","styled","main","match","useRouteMatch","active","setActive","showVaultSelection","setShowVaultSelection","showAddVault","setShowAddVault","instance","loadActive","AppBar","Toolbar","ArrowDropDown","Container","path","BottomNavigation","_","newValue","showLabels","BottomNavigationAction","icon","Timeline","Settings","undefinedOnError","func","OnboardingContainer","SHeading","h1","Welcome","loading","setLoading","loadSelected","selectedVault","src","AppLogo","alt","size","App","GlobalStyles","createGlobalStyle","normalize","avertaFont","avertaBoldFont","Root","StrictMode","theme","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2bd87e9.chunk.js","sourcesContent":["export const prepareEthSignSignatureForSafe = (signature) => {\n    return signature.replace(/00$/, \"1f\").replace(/1b$/, \"1f\").replace(/01$/, \"20\").replace(/1c$/, \"20\");\n};\n//# sourceMappingURL=signatures.js.map","import CID from 'cids';\nconst removeHexPrefix = (input) => input.toLowerCase().startsWith(\"0x\") ? input.slice(2) : input;\nexport const pullWithKeccak = async (ipfs, hashPart, encoding) => {\n    const multhash = Buffer.concat([Buffer.from(\"1b20\", \"hex\"), Buffer.from(removeHexPrefix(hashPart), \"hex\")]);\n    const cid = new CID(1, \"raw\", multhash, \"base32\");\n    let out = \"\";\n    for await (const file of ipfs.get(cid.toString())) {\n        if (!file.content)\n            continue;\n        const content = [];\n        for await (const chunk of file.content) {\n            content.push(chunk);\n        }\n        out += content.map(c => c.toString(encoding || 'hex')).join();\n    }\n    return out;\n};\n//# sourceMappingURL=ipfs.js.map","import FactoryAbi from './abis/Factory.json';\nimport EIP712Domain from \"eth-typed-data\";\nimport { Contract, constants, utils, BigNumber } from 'ethers';\nimport { buildValidationData } from './utils/proof';\nimport { pullWithKeccak } from './utils/ipfs';\nimport { prepareEthSignSignatureForSafe } from './utils/signatures';\nimport StatelessVault from '@rmeissner/stateless-vault-contracts/build/contracts/StatelessVault.json';\nimport Initializor from '@rmeissner/stateless-vault-contracts/build/contracts/Initializor.json';\nimport RelayedFactory from '@rmeissner/stateless-vault-contracts/build/contracts/ProxyFactoryWithInitializor.json';\nexport { pullWithKeccak };\nexport class BaseFactory {\n    constructor() {\n        this.vaultInterface = Contract.getInterface(StatelessVault.abi);\n    }\n    async creationData(vaultSetup) {\n        return this.vaultInterface.encodeFunctionData(\"setup(address[],uint256,address,address,address)\", [vaultSetup.signers, vaultSetup.threshold, constants.AddressZero, constants.AddressZero, constants.AddressZero]);\n    }\n}\nexport class LocalVaultFactory extends BaseFactory {\n    constructor(config) {\n        super();\n        this.config = config;\n        this.factoryInstance = new Contract(config.factoryAddress, FactoryAbi, config.signer);\n    }\n    async calculateAddress(initializer, saltNonce) {\n        const initializerHash = utils.solidityKeccak256([\"bytes\"], [initializer]);\n        const salt = utils.solidityKeccak256(['bytes32', 'uint256'], [initializerHash, saltNonce]);\n        const proxyCreationCode = await this.factoryInstance.proxyCreationCode();\n        const proxyDeploymentCode = utils.solidityPack(['bytes', 'uint256'], [proxyCreationCode, this.config.vaultImplementationAddress]);\n        const proxyDeploymentCodeHash = utils.solidityKeccak256([\"bytes\"], [proxyDeploymentCode]);\n        const address = utils.solidityKeccak256(['bytes1', 'address', 'bytes32', 'bytes32'], [\"0xFF\", this.config.factoryAddress, salt, proxyDeploymentCodeHash]);\n        return \"0x\" + address.slice(-40);\n    }\n    async create(vaultSetup, saltString) {\n        const initializer = await this.creationData(vaultSetup);\n        const saltNonce = utils.keccak256(Buffer.from(saltString || `${new Date()}`));\n        try {\n            const tx = await this.factoryInstance.createProxyWithNonce(this.config.vaultImplementationAddress, initializer, saltNonce);\n            await tx.wait();\n            console.log(tx);\n        }\n        catch (e) { }\n        const address = await this.calculateAddress(initializer, saltNonce);\n        return new Vault(this.config.signer.provider, address);\n    }\n}\nexport class RelayedVaultFactory extends BaseFactory {\n    constructor(config) {\n        super();\n        this.initializorInterface = Contract.getInterface(Initializor.abi);\n        this.config = config;\n        this.relayFactoryInstance = new Contract(config.relayFactoryAddress, RelayedFactory.abi, config.provider);\n        this.factoryInstance = new Contract(config.factoryAddress, FactoryAbi, config.provider);\n    }\n    async calculateAddress(saltNonce, validators, intializor) {\n        const proxyCreationData = this.initializorInterface.encodeFunctionData(\"setValidators\", [validators]);\n        const intializorAddress = intializor || await this.relayFactoryInstance.callStatic.initializor();\n        const initializerHash = utils.solidityKeccak256([\"bytes\"], [proxyCreationData]);\n        const salt = utils.solidityKeccak256(['bytes32', 'uint256'], [initializerHash, saltNonce]);\n        const proxyCreationCode = await this.factoryInstance.proxyCreationCode();\n        const proxyDeploymentCode = utils.solidityPack(['bytes', 'uint256'], [proxyCreationCode, intializorAddress]);\n        const proxyDeploymentCodeHash = utils.solidityKeccak256([\"bytes\"], [proxyDeploymentCode]);\n        const address = utils.solidityKeccak256(['bytes1', 'address', 'bytes32', 'bytes32'], [\"0xFF\", this.config.factoryAddress, salt, proxyDeploymentCodeHash]);\n        return \"0x\" + address.slice(-40);\n    }\n    saltNonce(saltString) {\n        return utils.keccak256(Buffer.from(saltString || `${new Date()}`));\n    }\n    async relayData(validator, setupTransaction, saltNonce) {\n        const intializorAddress = await this.relayFactoryInstance.callStatic.initializor();\n        const initializor = new Contract(intializorAddress, this.initializorInterface, this.config.provider);\n        const validatorAddress = await validator.getAddress();\n        const vaultAddress = await this.calculateAddress(saltNonce, [validatorAddress], intializorAddress);\n        const setupHash = await initializor.callStatic.generateSetupHashForAddress(vaultAddress, this.config.vaultImplementationAddress, setupTransaction.to, setupTransaction.value, setupTransaction.data, setupTransaction.operation, utils.solidityPack([\"address[]\"], [[validatorAddress]]));\n        const signatures = prepareEthSignSignatureForSafe(await validator.signMessage(utils.arrayify(setupHash)));\n        return {\n            implementation: this.config.vaultImplementationAddress,\n            transaction: setupTransaction,\n            validators: [validatorAddress],\n            signatures,\n            nonce: saltNonce\n        };\n    }\n}\nexport var VaultTransactionStatus;\n(function (VaultTransactionStatus) {\n    VaultTransactionStatus[VaultTransactionStatus[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    VaultTransactionStatus[VaultTransactionStatus[\"FAILED\"] = 1] = \"FAILED\";\n    VaultTransactionStatus[VaultTransactionStatus[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n})(VaultTransactionStatus || (VaultTransactionStatus = {}));\nexport class Vault {\n    constructor(provider, vaultAddress) {\n        this.address = vaultAddress;\n        this.vaultInstance = new Contract(vaultAddress, StatelessVault.abi, provider);\n    }\n    async loadTransactions() {\n        const txs = [];\n        const configTopic = this.vaultInstance.interface.getEventTopic(\"Configuration\");\n        const failedTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionFailure\");\n        const successTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionSuccess\");\n        const events = await this.vaultInstance.queryFilter({\n            address: this.vaultInstance.address,\n            topics: [\n                [\n                    configTopic, failedTopic, successTopic\n                ]\n            ]\n        });\n        for (const e of events) {\n            if (e.topics[0] == configTopic) {\n                const config = this.vaultInstance.interface.decodeEventLog(\"Configuration\", e.data, e.topics);\n                if (config.currentNonce.eq(0)) {\n                    txs.push({\n                        action: \"config_update\",\n                        txHash: e.transactionHash\n                    });\n                }\n                else {\n                    txs.push({\n                        action: \"config_update\",\n                        txHash: e.transactionHash,\n                        nonce: config.currentNonce - 1\n                    });\n                }\n            }\n            else if (e.topics[0] == failedTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionFailure\", e.data, e.topics);\n                txs.push({\n                    action: \"executed_transaction\",\n                    vaultHash: exec.txHash,\n                    ethereumHash: e.transactionHash,\n                    nonce: exec.usedNonce,\n                    success: false\n                });\n            }\n            else if (e.topics[0] == successTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionSuccess\", e.data, e.topics);\n                txs.push({\n                    action: \"executed_transaction\",\n                    vaultHash: exec.txHash,\n                    ethereumHash: e.transactionHash,\n                    nonce: exec.usedNonce,\n                    success: true\n                });\n            }\n        }\n        return txs.reverse();\n    }\n    async loadTransactionState(vaultHash) {\n        const failedTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionFailure\");\n        const successTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionSuccess\");\n        const events = await this.vaultInstance.queryFilter({\n            address: this.vaultInstance.address,\n            topics: [\n                [\n                    failedTopic, successTopic\n                ],\n                null,\n                vaultHash\n            ]\n        });\n        if (events.length != 1)\n            return VaultTransactionStatus.UNKNOWN;\n        return events.length[0].topics[0] === successTopic ? VaultTransactionStatus.SUCCESS : VaultTransactionStatus.FAILED;\n    }\n    async loadConfig() {\n        const configTopic = this.vaultInstance.interface.getEventTopic(\"Configuration\");\n        const failedTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionFailure\");\n        const successTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionSuccess\");\n        const events = await this.vaultInstance.queryFilter({\n            address: this.vaultInstance.address,\n            topics: [\n                [\n                    configTopic, failedTopic, successTopic\n                ]\n            ]\n        });\n        const currentConfig = {\n            implementation: constants.AddressZero,\n            signatureChecker: constants.AddressZero,\n            requestGuard: constants.AddressZero,\n            fallbackHandler: constants.AddressZero,\n            signers: [],\n            threshold: BigNumber.from(0),\n            nonce: BigNumber.from(-1)\n        };\n        for (const e of events) {\n            if (e.topics[0] == configTopic) {\n                const config = this.vaultInstance.interface.decodeEventLog(\"Configuration\", e.data, e.topics);\n                if (config.currentNonce >= currentConfig.nonce) {\n                    currentConfig.signers = config.signers;\n                    currentConfig.threshold = config.threshold;\n                    currentConfig.nonce = config.currentNonce;\n                    currentConfig.implementation = config.implementation;\n                    currentConfig.signatureChecker = config.signatureChecker;\n                    currentConfig.requestGuard = config.requestGuard;\n                    currentConfig.fallbackHandler = config.fallbackHandler;\n                }\n            }\n            else if (e.topics[0] == failedTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionFailure\", e.data, e.topics);\n                if (currentConfig.nonce <= exec.usedNonce) {\n                    currentConfig.nonce = exec.usedNonce.add(1);\n                }\n            }\n            else if (e.topics[0] == successTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionSuccess\", e.data, e.topics);\n                console.log(exec);\n                if (currentConfig.nonce <= exec.usedNonce) {\n                    currentConfig.nonce = exec.usedNonce.add(1);\n                }\n            }\n            else {\n                console.warn(\"Unknown log\");\n            }\n        }\n        if (currentConfig.nonce.eq(-1))\n            throw Error(\"could not load config\");\n        return currentConfig;\n    }\n    async pullWithLoader(ipfs, key, loader, encoding) {\n        if (!loader)\n            pullWithKeccak(ipfs, key, encoding);\n        return loader(key, encoding);\n    }\n    async fetchTxByHash(ipfs, txHash, loader) {\n        const hashData = await this.pullWithLoader(ipfs, txHash, loader);\n        const tx = await this.pullWithLoader(ipfs, hashData.substring(68), loader);\n        const txData = await this.pullWithLoader(ipfs, tx.substring(3 * 64, 4 * 64), loader);\n        const to = utils.getAddress(tx.substring(64 + 24, 2 * 64));\n        const value = BigNumber.from(\"0x\" + tx.substring(2 * 64, 3 * 64));\n        const data = \"0x\" + txData;\n        const operation = parseInt(tx.substring(4 * 64, 5 * 64), 16);\n        const minAvailableGas = BigNumber.from(\"0x\" + tx.substring(5 * 64, 6 * 64));\n        const nonce = BigNumber.from(\"0x\" + tx.substring(6 * 64, 7 * 64));\n        const metaHash = \"0x\" + tx.substring(7 * 64, 8 * 64);\n        let meta;\n        if (metaHash !== \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n            try {\n                meta = await this.pullWithLoader(ipfs, metaHash, loader, \"utf8\");\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        return {\n            to,\n            value: value.toHexString(),\n            data,\n            operation,\n            minAvailableGas: minAvailableGas.toHexString(),\n            nonce: nonce.toHexString(),\n            metaHash,\n            meta\n        };\n    }\n    async publishTx(ipfs, to, value, dataString, operation, nonce, meta) {\n        const metaData = meta ? JSON.stringify(meta) : null;\n        const metaHash = metaData ? utils.solidityKeccak256([\"string\"], [metaData]) : \"0x\";\n        if (metaData) {\n            console.log(\"Publish meta data\");\n            for await (const res of ipfs.add(metaData, { hashAlg: \"keccak-256\" })) {\n                console.log(`metadata: ${res.path}`);\n            }\n        }\n        const data = utils.arrayify(dataString);\n        const vaultDomain = new EIP712Domain({\n            chainId: 4,\n            verifyingContract: this.address,\n        });\n        const VaultTx = vaultDomain.createType('Transaction', [\n            { type: \"address\", name: \"to\" },\n            { type: \"uint256\", name: \"value\" },\n            { type: \"bytes\", name: \"data\" },\n            { type: \"uint8\", name: \"operation\" },\n            { type: \"uint256\", name: \"minAvailableGas\" },\n            { type: \"uint256\", name: \"nonce\" },\n            { type: \"bytes32\", name: \"metaHash\" },\n        ]);\n        const minAvailableGas = 0;\n        const vaultTx = new VaultTx({\n            to,\n            value: value.toHexString(),\n            data,\n            operation,\n            minAvailableGas,\n            nonce: nonce.toNumber(),\n            metaHash\n        });\n        // data\n        console.log(\"Publish data\");\n        for await (const res of ipfs.add(data, { hashAlg: \"keccak-256\" })) {\n            console.log(`metadata: ${res.path}`);\n        }\n        // TX_TYPEHASH, to, value, keccak256(data), operation, minAvailableGas, nonce\n        console.log(\"Publish tx\");\n        for await (const res of ipfs.add(vaultTx.encodeData(), { hashAlg: \"keccak-256\" })) {\n            console.log(`metadata: ${res.path}`);\n        }\n        // byte(0x19), byte(0x01), domainSeparator, txHash\n        console.log(\"Publish tx hash\");\n        const txHash = \"0x\" + vaultTx.signHash().toString('hex');\n        for await (const res of ipfs.add(vaultTx.encode(), { hashAlg: \"keccak-256\" })) {\n            console.log(`metadata: ${res.path}`);\n        }\n        const dataHash = await this.vaultInstance.generateTxHash(to, value, data, operation, minAvailableGas, nonce, metaHash);\n        if (txHash != dataHash)\n            throw Error(\"Invalid hash generated\");\n        return txHash;\n    }\n    async formatSignature(config, hashProvider, signatures, signer) {\n        let sigs;\n        let signers;\n        if (signatures) {\n            const dataHash = await hashProvider();\n            sigs = signatures.map((sig) => sig.slice(2));\n            let prevIndex = -1;\n            signers = signatures.map((sig) => {\n                const signer = utils.verifyMessage(utils.arrayify(dataHash), sig);\n                const signerIndex = config.signers.indexOf(signer, prevIndex + 1);\n                if (signerIndex <= prevIndex)\n                    throw Error(\"Invalid signer\");\n                prevIndex = signerIndex;\n                return signer;\n            });\n        }\n        else if (config.signers.length == 1) {\n            const singleSigner = await signer.getAddress();\n            if (config.signers.indexOf(singleSigner) < 0)\n                throw Error(\"Signer is not an owner\");\n            sigs = [utils.solidityPack([\"uint256\", \"uint256\", \"bytes1\"], [singleSigner, 0, \"0x01\"]).slice(2)];\n            signers = [singleSigner];\n        }\n        else {\n            throw Error(\"Cannot execute transaction due to missing confirmation\");\n        }\n        return { signaturesString: \"0x\" + sigs.join(\"\"), signers };\n    }\n    async buildExecData(transaction, signatures, signer) {\n        const config = await this.loadConfig();\n        if (!config.nonce.eq(transaction.nonce))\n            throw Error(\"Invalid nonce\");\n        const { signaturesString, signers } = await this.formatSignature(config, () => {\n            return this.vaultInstance.generateTxHash(transaction.to, transaction.value, transaction.data, transaction.operation, transaction.minAvailableGas, transaction.nonce, transaction.metaHash);\n        }, signatures, signer);\n        const validationData = await buildValidationData(config, signaturesString, signers);\n        //console.log(await this.vaultInstance.callStatic.execTransaction(to, value, data, operation, 0, config.nonce, \"0x\", validationData, true))\n        return {\n            wallet: this.address,\n            validationData,\n            transaction\n        };\n    }\n}\nexport class VaultSigner {\n    constructor(vault, signer) {\n        this.vault = vault;\n        this.signer = signer;\n    }\n    async signTx(transaction) {\n        const dataHash = await this.vault.vaultInstance.generateTxHash(transaction.to, transaction.value, transaction.data, transaction.operation, transaction.minAvailableGas, transaction.nonce, transaction.metaHash);\n        return prepareEthSignSignatureForSafe(await this.signer.signMessage(utils.arrayify(dataHash)));\n    }\n    async signTxFromHash(ipfs, txHash) {\n        const vaultTx = await this.vault.fetchTxByHash(ipfs, txHash);\n        return await this.signTx(vaultTx);\n    }\n    async signUpdate(newSigners, newThreshold, nonce) {\n        const config = await this.vault.loadConfig();\n        const dataHash = await this.vault.vaultInstance.generateConfigChangeHash(config.implementation, utils.solidityPack([\"address[]\"], [newSigners]), newThreshold, config.signatureChecker, config.requestGuard, config.fallbackHandler, \"0x\", nonce, \"0x\");\n        return prepareEthSignSignatureForSafe(await this.signer.signMessage(utils.arrayify(dataHash)));\n    }\n}\nexport class VaultExecutor {\n    constructor(vault, executor) {\n        this.vault = vault;\n        this.executor = executor;\n        this.writeVaultInstance = vault.vaultInstance.connect(executor);\n    }\n    async exec(to, value, data, operation, nonce, metaHash, signatures) {\n        const transaction = { to, value: value.toHexString(), data, operation, nonce: nonce.toHexString(), minAvailableGas: \"0x0\", metaHash };\n        const execData = await this.vault.buildExecData(transaction, signatures, this.executor);\n        //console.log(await this.vaultInstance.callStatic.execTransaction(to, value, data, operation, 0, config.nonce, \"0x\", validationData, true))\n        await this.writeVaultInstance.execTransaction(execData.transaction.to, execData.transaction.value, execData.transaction.data, execData.transaction.operation, execData.transaction.minAvailableGas, execData.transaction.nonce, execData.transaction.metaHash, execData.validationData, true);\n    }\n    async update(newSigners, newThreshold, nonce, signatures) {\n        const config = await this.vault.loadConfig();\n        if (!config.nonce.eq(nonce))\n            throw Error(\"Invalid nonce\");\n        const { signaturesString, signers } = await this.vault.formatSignature(config, () => {\n            return this.vault.vaultInstance.generateConfigChangeHash(config.implementation, utils.solidityPack([\"address[]\"], [newSigners]), newThreshold, config.signatureChecker, config.requestGuard, config.fallbackHandler, \"0x\", nonce, \"0x\");\n        }, signatures, this.executor);\n        const validationData = await buildValidationData(config, signaturesString, signers);\n        await this.writeVaultInstance.updateConfig(config.implementation, newSigners, newThreshold, config.signatureChecker, config.requestGuard, config.fallbackHandler, \"0x\", nonce, \"0x\", validationData);\n    }\n}\n//# sourceMappingURL=index.js.map","import { constants, utils } from 'ethers';\nexport const buildProof = async (txSigners, allSigners) => {\n    const ownersCopy = [...allSigners];\n    const indeces = txSigners.map(signer => {\n        const i = ownersCopy.indexOf(signer);\n        ownersCopy[i] = null;\n        return i;\n    });\n    const hashes = [];\n    const nodes = allSigners.map(signer => txSigners.indexOf(signer) < 0 ? utils.solidityKeccak256([\"uint256\"], [signer]) : \"0x0\");\n    let nodesCount = nodes.length;\n    while (nodesCount > 1) {\n        for (let i = 0; i < nodesCount; i += 2) {\n            let left = nodes[i];\n            let right;\n            if (i + 1 < nodesCount) {\n                right = nodes[i + 1];\n            }\n            else {\n                right = utils.solidityKeccak256([\"uint256\"], [\"0x0\"]);\n            }\n            if (left == \"0x0\" && right == \"0x0\") {\n                nodes[Math.floor(i / 2)] = \"0x0\";\n                continue;\n            }\n            if (left == \"0x0\") {\n                hashes.push(right);\n                nodes[Math.floor(i / 2)] = \"0x0\";\n                continue;\n            }\n            if (right == \"0x0\") {\n                hashes.push(left);\n                nodes[Math.floor(i / 2)] = \"0x0\";\n                continue;\n            }\n            nodes[Math.floor(i / 2)] = utils.solidityKeccak256([\"bytes32\", \"bytes32\"], [left, right]);\n        }\n        nodesCount = Math.ceil(nodesCount / 2);\n    }\n    return { indeces, hashes };\n};\nexport const buildValidationData = async (vaultConfig, signatures, signers) => {\n    const { indeces, hashes } = await buildProof(signers, vaultConfig.signers);\n    const validationData = utils.defaultAbiCoder.encode([\"uint256\", \"uint256\", \"address\", \"address\", \"uint256[]\", \"bytes32[]\", \"bytes\"], [vaultConfig.threshold, vaultConfig.signers.length, constants.AddressZero, constants.AddressZero, indeces, hashes, signatures]);\n    return validationData;\n};\n//# sourceMappingURL=proof.js.map","import { config } from 'dotenv'\n\nconfig()\n\nexport const chainNames: { [key: number]: string; } = {\n    1: \"mainnet\",\n    4: \"rinkeby\",\n    100: \"xdai\"\n}\n\nexport const rpcUrl: string = process.env.REACT_APP_RPC_URL!!\n\nexport const chainId: number = parseInt(process.env.REACT_APP_CHAIN_ID!!)\n\nexport const chainName: string = chainNames[chainId]","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport React from 'react'\nimport { chainName } from 'src/utils/config'\n\nconst AccountInfo: React.FC<{ address: string, className?: string, textColor?: ThemeColors }> = ({ address, className, textColor }) => {\n  if (!address) {\n    return null\n  }\n\n  return (\n    <EthHashInfo\n      hash={address}\n      textSize=\"xl\"\n      showCopyBtn\n      showIdenticon\n      showEtherscanBtn\n      shortenHash={4}\n      textColor={textColor || \"white\"}\n      className={className || \"address\"}\n      network={chainName}\n    />\n  )\n}\n\nexport default AccountInfo\n","import { rpcUrl } from \"src/utils/config\"\nimport { Signer, providers } from \"ethers\"\n\nlet localProvider = new providers.JsonRpcProvider({\n    url: rpcUrl\n})\n\nlet localSigner: Signer | undefined = undefined\n\nexport const loadProvider = (): providers.Provider => {\n    return localProvider\n}\n\nexport const setLocalSigner = (signer: Signer) => {\n    localSigner = signer;\n}\n\nexport const clearLocalSigner = () => {\n    localSigner = undefined\n}\n\nexport const loadSigner = (): Signer => {\n    if (!localSigner) localProvider.getSigner()\n    return localSigner!!\n}","import { pullWithKeccak, Vault, VaultTransaction } from \"@rmeissner/stateless-vault-sdk\"\nimport { loadProvider } from \"./ethereumRepository\"\nimport { utils } from 'ethers'\nimport IpfsClient from 'ipfs-http-client';\n\nconst VAULTS_STORAGE_KEY = \"vault_repository.vaults\"\nconst SELECTED_VAULT_STORAGE_KEY = \"vault_repository.selected_vault\"\nconst STORAGE_IPFS_CACHE_PREFIX = \"vault_repository.ipfs_cache.\"\n\ninterface StorageHolder<T> {\n    readonly version: number,\n    readonly value: T\n}\n\nconst ipfs = IpfsClient({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https'\n});\n\nconst loadVaultStorage = (): { [key: string]: string} => {\n    const stored = localStorage.getItem(VAULTS_STORAGE_KEY)\n    if (!stored) return {}\n    const holder: StorageHolder<{ [key: string]: string}> = JSON.parse(stored)\n    if (holder.version != 0) throw Error(\"Unknown storage version \" + holder.version)\n    return holder.value\n}\n\nconst writeVaultStorage = (vaults: { [key: string]: string})  => {\n    const holder: StorageHolder<{ [key: string]: string}> = {\n        version: 0,\n        value: vaults\n    }\n    localStorage.setItem(VAULTS_STORAGE_KEY, JSON.stringify(holder))\n}\n\nexport const loadLastSelectedVault = async (): Promise<string | undefined> => {\n    const store = localStorage.getItem(SELECTED_VAULT_STORAGE_KEY)\n    if (!store) return undefined\n    const holder: StorageHolder<string> = JSON.parse(store)\n    if (holder.version != 0) throw Error(\"Unknown storage version \" + holder.version)\n    return holder.value\n}\n\nexport const loadVaultName = async(address: string): Promise<string | undefined> => {\n    const vaults = await loadVaultStorage()\n    return vaults[address]\n}\n\nexport const managesVault = async(address: string): Promise<boolean> => {\n    const vaults = await loadVaultStorage()\n    return address in vaults\n}\n\nexport const removeLastSelectedVault = async () => {\n    localStorage.removeItem(SELECTED_VAULT_STORAGE_KEY)\n}\n\nexport const setLastSelectedVault = async (address: string) => {\n    const holder: StorageHolder<string> = {\n        version: 0,\n        value: address\n    }\n    localStorage.setItem(SELECTED_VAULT_STORAGE_KEY, JSON.stringify(holder))\n}\n\nexport const loadVaults = async(): Promise<{address: string, name: string}[]> => {\n    try {\n        const vaults = loadVaultStorage()\n        return Object.keys(vaults).sort().map((address) => {\n            return {\n                address,\n                name: vaults[address]\n            }\n        })\n    } catch (e) {\n        console.log(e)\n        return []\n    }\n}\n\nexport const setVault = async(address: string, name: string): Promise<void> => {\n    const vaults = loadVaultStorage()\n    vaults[address] = name\n    writeVaultStorage(vaults)\n}\n\nexport const removeVault = async(address: string): Promise<void> => {\n    const vaults = loadVaultStorage()\n    delete vaults[address]\n    writeVaultStorage(vaults)\n}\n\nexport const getVaultInstance = async(address: string): Promise<Vault> => {\n    if (!utils.isAddress(address)) throw Error(\"Invalid Address\")\n    return new Vault(loadProvider(), address)\n}\n\nconst cachedLoader = async (key: string, encoding: string): Promise<string> => {\n    try {\n        const cached = localStorage.getItem(STORAGE_IPFS_CACHE_PREFIX + key)\n        if (cached) return cached\n    } catch (e) {\n        console.error(e)\n    }\n    const value = await pullWithKeccak(ipfs, key, encoding)\n    try {\n        localStorage.setItem(STORAGE_IPFS_CACHE_PREFIX + key, value)\n    } catch (e) {\n        console.error(e)\n    }\n    return value\n}\n\nexport const loadTransactionDetails = async (vault: Vault, vaultHash: string): Promise<VaultTransaction> => {\n    return await vault.fetchTxByHash(ipfs, vaultHash, cachedLoader)\n}","import * as React from 'react'\nimport { Vault, VaultAction } from '@rmeissner/stateless-vault-sdk';\nimport { createStyles, WithStyles, withStyles, Box, List, ListItem, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst styles = createStyles({\n    list: {\n    },\n    item: {\n        display: 'block'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\nconst VaultTransactions: React.FC<Props> = ({ vault, classes }) => {\n    const [transactions, setTransactions] = React.useState<VaultAction[]>([])\n    const loadTransactions = React.useCallback(async () => {\n        try {\n            setTransactions(await vault.loadTransactions())\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n        }\n    }, [vault, setTransactions])\n    React.useEffect(() => {\n        setTransactions([])\n        loadTransactions()\n    }, [vault.address])\n    const listItems = transactions.map((tx) => {\n        switch (tx.action) {\n            case \"config_update\":\n                return (<ListItem className={classes.item}>\n                    <Box>Config Update</Box>\n                    <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{tx.txHash}</Box>\n                </ListItem>);\n            case \"executed_transaction\":\n                if (tx.success) {\n                    return (<Link to={location => `${location.pathname}/${tx.vaultHash}`}>\n                        <ListItem className={classes.item}>\n                            <Box>Tx success (nonce {tx.nonce.toString()})</Box>\n                            <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{tx.ethereumHash}</Box>\n                        </ListItem>\n                    </Link>);\n                } else {\n                    return (<Link to={location => `${location.pathname}/${tx.vaultHash}`}>\n                        <ListItem className={classes.item}>\n                            <Box>Tx failure (nonce {tx.nonce.toString()})</Box>\n                            <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{tx.ethereumHash}</Box>\n                        </ListItem>\n                    </Link >);\n                }\n        }\n    })\n    return transactions.length > 0 ? (\n        <List className={classes.list}>\n            <Typography>History</Typography>\n            { listItems}\n        </List>\n    ) : (\n            <p>No Transactions yet</p>\n        )\n}\n\nexport default withStyles(styles)(VaultTransactions)","import * as React from 'react'\nimport { Vault, VaultTransaction } from '@rmeissner/stateless-vault-sdk';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport WalletInfo from '../../WalletInfo'\nimport { createStyles, WithStyles, withStyles, Box, Typography } from '@material-ui/core';\nimport { loadTransactionDetails } from 'src/logic/vaultRepository';\nimport { utils } from 'ethers';\n\nconst styles = createStyles({\n    details: {\n        flex: 1\n    },\n    data: {\n        overflowWrap: 'anywhere',\n        maxWidth: '100vw'\n    },\n    address: {\n        display: 'flex',\n        justifyContent: 'center',\n        maxWidth: '100vw'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\ninterface Path {\n    vaultHash: string\n}\n\nconst VaultTransactionDetails: React.FC<Props> = ({ vault, classes }) => {\n    console.log(\"Load Transaction\")\n    const history = useHistory()\n    const { vaultHash } = useParams<Path>()\n    console.log(useParams<any>())\n    const [details, setDetails] = React.useState<VaultTransaction | undefined>(undefined)\n    const loadDetails = React.useCallback(async () => {\n        try {\n            setDetails(await loadTransactionDetails(vault, vaultHash))\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n            history.goBack()\n        }\n    }, [vault, vaultHash, setDetails])\n    console.log({ vaultHash })\n    React.useEffect(() => {\n        loadDetails()\n    }, [])\n    return details ? (\n        <Box className={classes.details}>\n            <p>Nonce</p>\n            <Typography>{details.nonce}</Typography>\n            <p>To</p>\n            <Box className={classes.address}><WalletInfo address={details.to} textColor=\"text\" /></Box>\n            <p>Value</p>\n            <Typography>{utils.formatEther(details.value)} ETH</Typography>\n            <p>Data</p>\n            <Typography className={classes.data}>{details.data}</Typography>\n            <p>Meta</p>\n            <Typography className={classes.data}>{details.meta}</Typography>\n            <p>Operation</p>\n            <Typography>{details.operation}</Typography>\n            <p>Min available gas</p>\n            <Typography>{details.minAvailableGas}</Typography>\n        </Box>\n    ) : (\n            <p>Loading details</p>\n        )\n}\n\nexport default withStyles(styles)(VaultTransactionDetails)","import * as React from 'react'\nimport { Button, createStyles, WithStyles, withStyles, TextField, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions } from '@material-ui/core'\nimport { useHistory } from 'react-router'\nimport { setVault, setLastSelectedVault, managesVault } from 'src/logic/vaultRepository'\nimport { utils } from 'ethers'\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n}\n\nconst AddVaultDialog: React.FC<Props> = ({ open, onClose }) => {\n    const history = useHistory()\n    const [vaultName, setVaultName] = React.useState(\"\")\n    const [vaultAddress, setVaultAddress] = React.useState(\"\")\n    const [inputError, setInputError] = React.useState<string | undefined>()\n    const addVault = React.useCallback(async () => {\n        try {\n            const cleanAddress = utils.getAddress(vaultAddress)\n            if (await managesVault(cleanAddress)) {\n                setInputError(\"Vault already exists in app\")\n                return\n            }\n            await setVault(cleanAddress, vaultName)\n            await setLastSelectedVault(cleanAddress)\n            onClose()\n            history.push(`/`)\n        } catch (e) {\n            console.error(e)\n            setInputError(\"Invalid vault address\")\n        }\n    }, [setInputError, vaultAddress, vaultName, history])\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Add a Vault</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    <TextField\n                        label=\"Vault name\"\n                        onChange={(e) => {\n                            setVaultName(e.target.value)\n                        }}>\n                        {vaultName}\n                    </TextField>\n                    <TextField\n                        label=\"Vault address\"\n                        onChange={(e) => {\n                            setVaultAddress(e.target.value)\n                            setInputError(undefined)\n                        }}\n                        error={inputError !== undefined}\n                        helperText={inputError}>\n                        {vaultAddress}\n                    </TextField>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={addVault} color=\"primary\">\n                    Add\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(AddVaultDialog)","import * as React from 'react'\nimport { Vault, VaultConfig } from '@rmeissner/stateless-vault-sdk'\nimport { Box, createStyles, WithStyles, withStyles, List, ListItem } from '@material-ui/core'\nimport WalletInfo from '../../WalletInfo'\n\nconst styles = createStyles({\n    list: {\n    },\n    content: {\n    },\n    item: {\n        display: 'flex',\n        justifyContent: 'center',\n        maxWidth: '100vw'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\nconst VaultSettings: React.FC<Props> = ({ vault, classes }) => {\n    const [configuration, setConfiguration] = React.useState<VaultConfig | undefined>(undefined)\n    const loadConfig = React.useCallback(async () => {\n        try {\n            setConfiguration(await vault.loadConfig())\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n        }\n    }, [vault, setConfiguration])\n    React.useEffect(() => {\n        loadConfig()\n    }, [])\n    return configuration ? (\n        <div className={classes.content}>\n            <p>Threshold</p>\n            <Box>{configuration.threshold.toString()}</Box>\n            <p>Nonce</p>\n            <Box>{configuration.nonce.toString()}</Box>\n            <p>Signers</p>\n            <List className={classes.list}>\n                {configuration.signers.map((signer) => {\n                    return (\n                        <ListItem className={classes.item}><WalletInfo address={signer} textColor=\"text\" /></ListItem>\n                    )\n                })}\n            </List>\n            <p>Implementation</p>\n            <Box className={classes.item}><WalletInfo address={configuration.implementation} textColor=\"text\" /></Box>\n        </div>\n    ) : (\n            <p>Loading config</p>\n        )\n}\n\nexport default withStyles(styles)(VaultSettings)","import * as React from 'react'\nimport { Box, Button, createStyles, WithStyles, withStyles, List, ListItem, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions } from '@material-ui/core'\nimport { useHistory } from 'react-router'\nimport { loadLastSelectedVault, loadVaults, removeVault, removeLastSelectedVault, setLastSelectedVault } from 'src/logic/vaultRepository'\nimport AccountInfo from 'src/components/WalletInfo'\nimport { Delete } from '@material-ui/icons';\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n    onAdd?: () => void\n}\n\nconst VaultSelectionDialog: React.FC<Props> = ({ classes, open, onClose, onAdd }) => {\n    const history = useHistory()\n    const [vaults, setVaults] = React.useState<{ address: string, name: string }[]>([])\n    const select = React.useCallback(async (address: string) => {\n        try {\n            await setLastSelectedVault(address)\n            history.push('/')\n        } catch (e) {\n            console.error(e)\n        }\n    }, [history])\n    const remove = React.useCallback(async (address: string) => {\n        try {\n            const lastVault = await loadLastSelectedVault()\n            if (lastVault === address) {\n                await removeLastSelectedVault()\n            }\n            await removeVault(address)\n            history.push('/')\n        } catch (e) {\n            console.error(e)\n        }\n    }, [history])\n    React.useEffect(() => {\n        console.log(\"init\")\n        const init = async () => {\n            try {\n                setVaults(await loadVaults())\n            } catch (e) {\n                onClose()\n            }\n        }\n        init()\n    }, [open])\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Select a Vault</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    <List>\n                        {vaults.map((vault) => (\n                            <ListItem onClick={() => select(vault.address)}>\n                                <Box className={classes.item}>\n                                    {vault.name}\n                                    <AccountInfo address={vault.address} textColor=\"text\" />\n                                </Box>\n                                <Button className={classes.remove} color=\"secondary\" onClick={() => remove(vault.address)}><Delete color=\"secondary\" /></Button>\n                            </ListItem>\n                        ))}\n                        {onAdd && (\n                            <ListItem>\n                                <Button onClick={() => { onAdd(); onClose() }} color=\"default\">Add vault</Button>\n                            </ListItem>\n                        )}\n                    </List>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\">\n                    Cancel\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(VaultSelectionDialog)","import * as React from 'react'\nimport WalletInfo from 'src/components/WalletInfo'\nimport { Vault } from '@rmeissner/stateless-vault-sdk';\nimport { Redirect, Route, Switch, useHistory, useParams, useRouteMatch } from \"react-router-dom\";\nimport { AppBar, BottomNavigation, BottomNavigationAction, Container, createStyles, Toolbar, WithStyles, withStyles } from '@material-ui/core';\nimport { Timeline, Settings, ArrowDropDown } from '@material-ui/icons';\nimport { getVaultInstance } from 'src/logic/vaultRepository';\nimport styled from 'styled-components'\nimport VaultTransactions from './transactions/VaultTransactions';\nimport VaultTransactionDetails from './transactions/VaultTransactionDetails';\nimport AddVaultDialog from './settings/AddVaultDialog';\nimport VaultSettings from './settings/VaultSettings';\nimport VaultSelectionDialog from './settings/VaultSelectionDialog';\n\nconst styles = createStyles({\n    title: {\n        flex: 1\n    },\n    toolbar: {\n        maxWidth: '100vw',\n        background: '#ffffff'\n    },\n    content: {\n        paddingBottom: '64px',\n        flex: \"1 1 auto\",\n        maxWidth: '100vw'\n    },\n    navigation: {\n        height: '64px',\n        position: 'fixed',\n        bottom: 0,\n        width: '100vw'\n    }\n})\n\nconst VaultHomeContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: top;\n  text-align: center;\n  flex-grow: 1;\n  width: 100vw;\n  height: 100vh;\n`\n\ninterface Active {\n    address: string,\n    instance: Vault\n}\n\ninterface Path {\n    vaultAddress: string\n}\n\nconst VaultHome: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n    const match = useRouteMatch()\n    const [active, setActive] = React.useState<Active | undefined>(undefined)\n    const [showVaultSelection, setShowVaultSelection] = React.useState(false)\n    const [showAddVault, setShowAddVault] = React.useState(false)\n    const history = useHistory()\n    const { vaultAddress } = useParams<Path>()\n    React.useEffect(() => {\n        const loadActive = async () => {\n            try {\n                const instance = await getVaultInstance(vaultAddress)\n                setActive({\n                    address: vaultAddress,\n                    instance\n                })\n            } catch (e) {\n                console.log(`Could not load Vault ${vaultAddress}`)\n                console.error(e)\n                history.push(`/`)\n            }\n        }\n        loadActive()\n    }, [vaultAddress, setActive])\n    if (!active) return (<>Loading</>)\n    return (\n        <VaultHomeContainer>\n            <AppBar position=\"fixed\">\n                <Toolbar className={classes.toolbar}>\n                    <WalletInfo address={active.address!} className={classes.title} textColor=\"text\" />\n                    <ArrowDropDown color=\"action\" onClick={() => setShowVaultSelection(true)} />\n                </Toolbar>\n            </AppBar>\n            <Toolbar />\n            <Container className={classes.content}>\n                <Switch>\n                    <Route path={`${match.path}/transactions/:vaultHash`}>\n                        <VaultTransactionDetails vault={active.instance} />\n                    </Route>\n                    <Route path={`${match.path}/transactions`}>\n                        <VaultTransactions vault={active.instance} />\n                    </Route>\n                    <Route path={`${match.path}/config`}>\n                        <VaultSettings vault={active.instance} />\n                    </Route>\n                    <Route path=\"*\">\n                        <Redirect to={`${match.url}/transactions`} />\n                    </Route>\n                </Switch>\n            </Container>\n            <BottomNavigation\n                className={classes.navigation}\n                onChange={(_, newValue) => {\n                    switch (newValue) {\n                        case 1:\n                            history.push(`${match.url}/config`)\n                            break;\n                        default:\n                            history.push(`${match.url}/transactions`)\n                            break;\n                    }\n                }}\n                showLabels\n            >\n                <BottomNavigationAction label=\"Transactions\" icon={<Timeline />} />\n                <BottomNavigationAction label=\"Settings\" icon={<Settings />} />\n            </BottomNavigation>\n            <VaultSelectionDialog open={showVaultSelection} onClose={() => setShowVaultSelection(false)} onAdd={() => setShowAddVault(true)} />\n            <AddVaultDialog open={showAddVault} onClose={() => setShowAddVault(false)} />\n        </VaultHomeContainer>\n    )\n}\n\nexport default withStyles(styles)(VaultHome)","export default __webpack_public_path__ + \"static/media/yacate-logo.30ab8735.svg\";","export const undefinedOnError = async<T>(func: Promise<T>): Promise<T | undefined> => {\n    try {\n        return await func\n    } catch (e) {\n        console.error(e)\n        return undefined\n    }\n}","import AppLogo from 'src/assets/icons/yacate-logo.svg'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport { TextField } from '@material-ui/core'\nimport { utils } from 'ethers'\nimport { Button } from '@gnosis.pm/safe-react-components'\nimport { loadLastSelectedVault, loadVaults, setLastSelectedVault, setVault } from 'src/logic/vaultRepository'\nimport { useHistory } from 'react-router'\nimport { undefinedOnError } from 'src/utils/general'\n\nconst OnboardingContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: center;\n  text-align: center;\n`\n\nconst SHeading = styled.h1`\n@media screen and (max-width: 768px) {\n  font-size: 1.2em;\n}\n`\n\nconst Welcome: React.FC = () => {\n  const history = useHistory()\n  const [loading, setLoading] = React.useState(true)\n  const [vaultName, setVaultName] = React.useState(\"\")\n  const [vaultAddress, setVaultAddress] = React.useState(\"\")\n  const [inputError, setInputError] = React.useState<string | undefined>()\n  const addVault = React.useCallback(async () => {\n    try {\n      const cleanAddress = utils.getAddress(vaultAddress)\n      await setVault(cleanAddress, vaultName)\n      await setLastSelectedVault(cleanAddress)\n      history.replace(`/${cleanAddress}`)\n    } catch (e) {\n      console.error(e)\n      setInputError(\"Invalid vault address\")\n    }\n  }, [setInputError, vaultAddress, vaultName, history])\n\n  const loadSelected = React.useCallback(async () => {\n    setLoading(true)\n    let selectedVault = await undefinedOnError(loadLastSelectedVault())\n    if (!selectedVault) {\n      const vaults = await loadVaults()\n      if (vaults.length > 0) {\n        selectedVault = vaults[0].address\n        await setLastSelectedVault(selectedVault)\n      }\n    }\n    if (selectedVault) {\n      history.replace(`/${selectedVault}`)\n    }\n    setLoading(false)\n  }, [history, setLoading])\n\n  React.useEffect(() => {\n    loadSelected()\n  }, [loadSelected])\n\n  if (loading) return (\n    <OnboardingContainer>\n      <img src={AppLogo} alt=\"App Logo\" width=\"100\"></img>\n      <SHeading>Yacate - A smart wallet based on the Stateless Vault</SHeading>\n      <p>Loading</p>\n    </OnboardingContainer>\n  )\n  return (\n    <OnboardingContainer>\n      <img src={AppLogo} alt=\"App Logo\" width=\"100\"></img>\n      <SHeading>Yacate - A smart wallet based on the Stateless Vault</SHeading>\n      <p>Start by adding a Vault</p>\n      <TextField\n        label=\"Vault name\"\n        onChange={(e) => {\n          setVaultName(e.target.value)\n        }}>\n        {vaultName}\n      </TextField>\n      <TextField\n        label=\"Vault address\"\n        onChange={(e) => {\n          setVaultAddress(e.target.value)\n          setInputError(undefined)\n        }}\n        error={inputError !== undefined}\n        helperText={inputError}>\n        {vaultAddress}\n      </TextField>\n      <Button size=\"lg\" color=\"primary\" onClick={addVault}>Add Vault</Button>\n    </OnboardingContainer>\n  )\n}\n\nexport default Welcome","import React from 'react'\nimport { Route, Switch, HashRouter as Router } from \"react-router-dom\"\nimport VaultHome from './vault/VaultHome'\nimport Welcome from './onboarding/Welcome'\n\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:vaultAddress\">\n          <VaultHome />\n        </Route>\n        <Route path=\"/\">\n          <Welcome />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport { createGlobalStyle } from 'styled-components'\nimport { normalize } from 'styled-normalize'\n\nconst GlobalStyles = createGlobalStyle`\n  ${normalize}\n\n  @font-face {\n    font-family: 'Averta';\n    font-display: swap;\n    src: local('Averta'), local('Averta Bold'),\n    url(${avertaFont}) format('woff2'),\n    url(${avertaBoldFont}) format('woff');\n  }\n\n  body {\n    font-family: 'Averta', sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n    background: #fefefe;\n  }\n\n  .web3connect-connect-button {\n    background-color: #008c73 !important;\n  }\n\n  .walletconnect-qrcode__base {\n    left: 0;\n  }\n\n  a {\n    color: #008c73;\n  }\n\n  .address p {\n    font-family: 'Roboto', monospace;\n  }\n`\n\nexport default GlobalStyles\n","import { theme } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport App from 'src/components/App'\nimport GlobalStyles from 'src/styles/global'\nimport { ThemeProvider } from 'styled-components'\n\nconst Root: React.FC = () => (\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n)\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './Root'\nimport * as serviceWorker from './serviceWorkerRegistraction'\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}