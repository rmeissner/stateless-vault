{"version":3,"sources":["components/WalletInfo.tsx","logic/ethereumRepository.ts","logic/vaultRepository.ts","components/vault/transactions/VaultTransactions.tsx","components/vault/transactions/VaultTransactionDetails.tsx","components/vault/settings/AddVaultDialog.tsx","components/vault/settings/VaultSettings.tsx","components/vault/settings/VaultSelectionDialog.tsx","components/vault/apps/messaging.ts","logic/relayRepository.ts","components/vault/apps/TransactionProposalDialog.tsx","components/ConnectButton.tsx","components/account/SelectAccount.tsx","components/vault/apps/VaultApps.tsx","components/vault/settings/VaultCreationDialog.tsx","components/vault/VaultHome.tsx","assets/icons/yacate-logo.svg","utils/general.ts","components/onboarding/Welcome.tsx","components/App.tsx","styles/global.ts","Root.tsx","serviceWorkerRegistraction.ts","index.tsx","components/vault/utils/multisend.ts","../../src/index.ts","../../../src/utils/signatures.ts","../../../src/utils/ipfs.ts","../../../src/utils/proof.ts","utils/config.ts"],"names":["AccountInfo","address","className","textColor","hash","textSize","showCopyBtn","showIdenticon","showEtherscanBtn","shortenHash","network","chainName","WALLET_STORAGE_KEY","WALLET_PASSWORD","localProvider","providers","JsonRpcProvider","url","rpcUrl","localSigner","undefined","loadProvider","setLocalSigner","signer","loadSigner","getSignerAddress","a","getAddress","hasAppSigner","localStorage","getItem","getAppSigner","walletState","Wallet","fromEncryptedJson","createRandom","wallet","console","log","encrypt","scrypt","N","setItem","getAppSignerAddress","appSigner","setAppSigner","getAppMnemonic","mnemonic","phrase","VAULTS_STORAGE_KEY","PROPOSAL_STORAGE_KEY_PREFIX","SELECTED_VAULT_STORAGE_KEY","STORAGE_IPFS_CACHE_PREFIX","ipfs","IpfsClient","host","port","protocol","loadVaultStorage","stored","holder","JSON","parse","version","Error","value","writeVaultStorage","vaults","stringify","loadLastSelectedVault","store","managesVault","removeLastSelectedVault","removeItem","setLastSelectedVault","loadVaults","Object","keys","sort","map","name","setVault","removeVault","getVaultInstance","utils","isAddress","Vault","cachedLoader","key","encoding","cached","error","pullWithKeccak","e","loadTransactionDetails","vault","vaultHash","fetchTxByHash","loadProposalStorage","vaultAddress","writeProposalStorage","loadTransactionProposals","proposals","entries","transaction","left","right","BigNumber","from","nonce","sub","toNumber","removeTransactionProposals","vaultHashes","addTransactionProposal","publishTx","to","data","operation","meta","metaHash","styles","createStyles","list","item","display","withStyles","classes","React","transactions","setTransactions","setProposals","loadItems","loadTransactions","tx","action","filter","val","listItems","ListItem","Box","textOverflow","overflow","txHash","success","location","pathname","toString","ethereumHash","proposalItems","proposal","length","List","Typography","details","flex","overflowWrap","maxWidth","justifyContent","history","useHistory","useParams","setDetails","loadDetails","goBack","WalletInfo","formatEther","minAvailableGas","remove","margin","open","onClose","vaultName","setVaultName","setVaultAddress","inputError","setInputError","addVault","cleanAddress","push","Dialog","scroll","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","dividers","DialogContentText","tabIndex","TextField","label","onChange","target","helperText","DialogActions","Button","onClick","color","content","setMnemonic","configuration","setConfiguration","loadLocalSigner","loadConfig","toggleMnemonic","threshold","signers","implementation","size","onAdd","onCreate","setVaults","select","init","Delete","FrameCommunicator","frame","appUrl","info","handlers","provider","method","params","requestId","this","onTransactionProposal","txs","sendResponse","txServiceUrl","payload","communicator","send","call","then","resp","err","sendError","message","source","window","includes","origin","handleMessage","frameWindow","current","contentWindow","sdkVersion","getSDKVersion","msg","MessageFormatter","makeResponse","postMessage","makeErrorResponse","defaultWindow","eventWindow","callback","ev","onMessage","addEventListener","removeEventListener","sameTx","toLowerCase","eq","checkFeeAndOptimize","estimate","fee","decodeMultiSend","transactionsWithPayment","paymentTx","feeReceiver","requestedTransactions","buildMultiSend","requestFee","preparedTx","axios","post","relayUrl","response","relayTransaction","signatures","buildExecData","execData","relayCreation","safeTxGas","app","onConfirm","onReject","submitTx","setSubmitTx","loading","setLoading","setEstimate","proposeTx","estimation","relay","vaultTx","metaTxToVaultTx","vaultSigner","VaultSigner","signTx","estimateTx","config","signerAddress","canSubmit","indexOf","rejectTx","CircularProgress","Checkbox","checked","_e","disabled","ConnectButton","onConnect","onDialogOpen","connect","web3Modal","Web3Modal","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","chainId","SelectAccount","onProgress","onSelected","onWalletDialogVisible","useAppAccount","web3provider","Web3Provider","getSigner","appContainer","border","frameborder","width","height","setSignerAddress","canUseApps","setCanUseApps","proposalParams","setProposalParams","defaultAppUrl","appFrame","safeAddress","ethBalance","handleTransactionConfirmation","safeTxHash","handleTransactionRejection","checkSigner","ref","src","showConnectModal","setShowConnectModal","setSigner","handleClose","activateVault","createVault","factory","relayData","getBalance","vaultBalance","deploymentTxHash","getTransaction","deploymentTx","wait","estimateCreation","RelayedVaultFactory","factoryAddress","vaultImplementationAddress","creationData","setupData","saltNonce","calculateAddress","getCode","title","toolbar","background","paddingBottom","navigation","position","bottom","VaultHomeContainer","styled","main","match","useRouteMatch","active","setActive","showVaultSelection","setShowVaultSelection","showVaultCreation","setShowVaultCreation","showAddVault","setShowAddVault","instance","loadActive","AppBar","Toolbar","ArrowDropDown","Container","path","BottomNavigation","_","newValue","showLabels","BottomNavigationAction","icon","Timeline","Apps","Settings","undefinedOnError","func","OnboardingContainer","SHeading","h1","Welcome","replace","loadSelected","selectedVault","AppLogo","alt","App","GlobalStyles","createGlobalStyle","normalize","avertaFont","avertaBoldFont","Root","StrictMode","theme","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","multiSendInterface","Interface","multiSendAbi","metaTx","metaString","toHexString","removeHexPrefix","input","startsWith","slice","encodeData","dataBuffer","Buffer","solidityPack","multiSendBytes","multiSendData","encodeFunctionData","multiSendAddress","decodeFunctionData","rawData","index","parseInt","dataLength","vaultInstance","prepareEthSignSignatureForSafe","signature","chunk","process","1","4","100"],"mappings":"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","file":"static/js/main.7a4a8734.chunk.js","sourcesContent":["import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport React from 'react'\nimport { chainName } from 'src/utils/config'\n\nconst AccountInfo: React.FC<{ address: string, className?: string, textColor?: ThemeColors }> = ({ address, className, textColor }) => {\n  if (!address) {\n    return null\n  }\n\n  return (\n    <EthHashInfo\n      hash={address}\n      textSize=\"xl\"\n      showCopyBtn\n      showIdenticon\n      showEtherscanBtn\n      shortenHash={4}\n      textColor={textColor || \"white\"}\n      className={className || \"address\"}\n      network={chainName}\n    />\n  )\n}\n\nexport default AccountInfo\n","import { rpcUrl } from \"src/utils/config\"\nimport { Signer, providers, Wallet } from \"ethers\"\n\nconst WALLET_STORAGE_KEY = \"ethereum_repository.app_wallet\"\nconst WALLET_PASSWORD = \"THIS_SHOULD_NOT_BE_HARDCODED\"\n\nlet localProvider = new providers.JsonRpcProvider({\n    url: rpcUrl\n})\n\nlet localSigner: Signer | undefined = undefined\n\nexport const loadProvider = (): providers.JsonRpcProvider => {\n    return localProvider\n}\n\nexport const setLocalSigner = (signer: Signer) => {\n    localSigner = signer;\n}\n\nexport const clearLocalSigner = () => {\n    localSigner = undefined\n}\n\nexport const hasLocalSigner = (): boolean => {\n    return !!localSigner\n}\n\nexport const loadSigner = (): Signer | undefined => {\n    return localSigner\n}\n\nexport const getSignerAddress = async (): Promise<string | undefined> => {\n    const signer = loadSigner()\n    if (!signer) return undefined\n    return await signer.getAddress()\n}\n\nexport const hasAppSigner = (): boolean => {\n    return !!localStorage.getItem(WALLET_STORAGE_KEY)\n}\n\nconst getAppSigner = async (): Promise<Wallet> => {\n    const walletState = localStorage.getItem(WALLET_STORAGE_KEY)\n    const wallet = walletState ? await Wallet.fromEncryptedJson(walletState, WALLET_PASSWORD) : Wallet.createRandom()\n    if (!walletState) {\n        console.log(\"Created new app wallet\")\n        localStorage.setItem(WALLET_STORAGE_KEY, await wallet.encrypt(WALLET_PASSWORD, { scrypt: { N: 2 } }))\n    }\n    return wallet\n}\n\nexport const getAppSignerAddress = async (): Promise<string | undefined> => {\n    if (!hasAppSigner()) return undefined\n    const appSigner = await getAppSigner()\n    return appSigner.address\n}\n\nexport const setAppSigner = async () => {\n    setLocalSigner(await getAppSigner())\n}\n\nexport const getAppMnemonic = async (): Promise<string | undefined> => {\n    if (!hasAppSigner()) return undefined\n    return (await getAppSigner()).mnemonic.phrase\n}\n\nexport const clearAppSigner = async (): Promise<void> => {\n    localStorage.removeItem(WALLET_STORAGE_KEY)\n}","import { pullWithKeccak, Vault, VaultTransaction } from \"@rmeissner/stateless-vault-sdk\"\nimport { loadProvider } from \"./ethereumRepository\"\nimport { utils, BigNumber } from 'ethers'\nimport IpfsClient from 'ipfs-http-client';\n\nconst VAULTS_STORAGE_KEY = \"vault_repository.vaults\"\nconst PROPOSAL_STORAGE_KEY_PREFIX = \"vault_repository.proposals.\"\nconst SELECTED_VAULT_STORAGE_KEY = \"vault_repository.selected_vault\"\nconst STORAGE_IPFS_CACHE_PREFIX = \"vault_repository.ipfs_cache.\"\n\ninterface StorageHolder<T> {\n    readonly version: number,\n    readonly value: T\n}\n\nconst ipfs = IpfsClient({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https'\n});\n\nconst loadVaultStorage = (): { [key: string]: string } => {\n    const stored = localStorage.getItem(VAULTS_STORAGE_KEY)\n    if (!stored) return {}\n    const holder: StorageHolder<{ [key: string]: string }> = JSON.parse(stored)\n    if (holder.version != 0) throw Error(\"Unknown storage version \" + holder.version)\n    return holder.value\n}\n\nconst writeVaultStorage = (vaults: { [key: string]: string }) => {\n    const holder: StorageHolder<{ [key: string]: string }> = {\n        version: 0,\n        value: vaults\n    }\n    localStorage.setItem(VAULTS_STORAGE_KEY, JSON.stringify(holder))\n}\n\nexport const loadLastSelectedVault = async (): Promise<string | undefined> => {\n    const store = localStorage.getItem(SELECTED_VAULT_STORAGE_KEY)\n    if (!store) return undefined\n    const holder: StorageHolder<string> = JSON.parse(store)\n    if (holder.version != 0) throw Error(\"Unknown storage version \" + holder.version)\n    return holder.value\n}\n\nexport const loadVaultName = async (address: string): Promise<string | undefined> => {\n    const vaults = await loadVaultStorage()\n    return vaults[address]\n}\n\nexport const managesVault = async (address: string): Promise<boolean> => {\n    const vaults = await loadVaultStorage()\n    return address in vaults\n}\n\nexport const removeLastSelectedVault = async () => {\n    localStorage.removeItem(SELECTED_VAULT_STORAGE_KEY)\n}\n\nexport const setLastSelectedVault = async (address: string) => {\n    const holder: StorageHolder<string> = {\n        version: 0,\n        value: address\n    }\n    localStorage.setItem(SELECTED_VAULT_STORAGE_KEY, JSON.stringify(holder))\n}\n\nexport const loadVaults = async (): Promise<{ address: string, name: string }[]> => {\n    try {\n        const vaults = loadVaultStorage()\n        return Object.keys(vaults).sort().map((address) => {\n            return {\n                address,\n                name: vaults[address]\n            }\n        })\n    } catch (e) {\n        console.log(e)\n        return []\n    }\n}\n\nexport const setVault = async (address: string, name: string): Promise<void> => {\n    const vaults = loadVaultStorage()\n    vaults[address] = name\n    writeVaultStorage(vaults)\n}\n\nexport const removeVault = async (address: string): Promise<void> => {\n    const vaults = loadVaultStorage()\n    delete vaults[address]\n    writeVaultStorage(vaults)\n}\n\nexport const getVaultInstance = async (address: string): Promise<Vault> => {\n    if (!utils.isAddress(address)) throw Error(\"Invalid Address\")\n    return new Vault(loadProvider(), address)\n}\n\nconst cachedLoader = async (key: string, encoding: string): Promise<string> => {\n    try {\n        const cached = localStorage.getItem(STORAGE_IPFS_CACHE_PREFIX + key)\n        if (cached) return cached\n    } catch (e) {\n        console.error(e)\n    }\n    const value = await pullWithKeccak(ipfs, key, encoding)\n    try {\n        localStorage.setItem(STORAGE_IPFS_CACHE_PREFIX + key, value)\n    } catch (e) {\n        console.error(e)\n    }\n    return value\n}\n\nexport const loadTransactionDetails = async (vault: Vault, vaultHash: string): Promise<VaultTransaction> => {\n    return await vault.fetchTxByHash(ipfs, vaultHash, cachedLoader)\n}\n\nconst loadProposalStorage = (vaultAddress: string): { [key: string]: VaultTransaction } => {\n    const stored = localStorage.getItem(PROPOSAL_STORAGE_KEY_PREFIX + vaultAddress)\n    if (!stored) return {}\n    const holder: StorageHolder<{ [key: string]: VaultTransaction }> = JSON.parse(stored)\n    if (holder.version != 0) throw Error(\"Unknown storage version \" + holder.version)\n    return holder.value\n}\n\nconst writeProposalStorage = (vaultAddress: string, vaults: { [key: string]: VaultTransaction }) => {\n    const holder: StorageHolder<{ [key: string]: VaultTransaction }> = {\n        version: 0,\n        value: vaults\n    }\n    localStorage.setItem(PROPOSAL_STORAGE_KEY_PREFIX + vaultAddress, JSON.stringify(holder))\n}\n\nexport const loadTransactionProposals = async (vault: Vault): Promise<{ vaultHash: string, transaction: VaultTransaction }[]> => {\n    const proposals = loadProposalStorage(vault.address)\n    return Object.entries(proposals)\n        .map(([vaultHash, transaction]) => { return { vaultHash, transaction } })\n        .sort((left, right) => BigNumber.from(left.transaction.nonce).sub(BigNumber.from(right.transaction.nonce)).toNumber())\n}\n\nexport const removeTransactionProposals = async (vault: Vault, vaultHashes: string[]): Promise<void> => {\n    const proposals = loadProposalStorage(vault.address)\n    for (let vaultHash of vaultHashes) {\n        delete proposals[vaultHash]\n    }\n    writeProposalStorage(vault.address, proposals)\n}\n\nexport const addTransactionProposal = async (vault: Vault, transaction: VaultTransaction): Promise<string> => {\n    console.log(ipfs)\n    const { vaultHash, metaHash } = await vault.publishTx(\n        ipfs,\n        transaction.to,\n        BigNumber.from(transaction.value),\n        transaction.data,\n        transaction.operation,\n        BigNumber.from(transaction.nonce),\n        transaction.meta\n    )\n    transaction.metaHash = metaHash\n    const proposals = loadProposalStorage(vault.address)\n    proposals[vaultHash] = transaction\n    writeProposalStorage(vault.address, proposals)\n    return vaultHash\n}","import * as React from 'react'\nimport { Vault, VaultAction, VaultTransaction } from '@rmeissner/stateless-vault-sdk';\nimport { createStyles, WithStyles, withStyles, Box, List, ListItem, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { loadTransactionProposals, removeTransactionProposals } from 'src/logic/vaultRepository';\n\nconst styles = createStyles({\n    list: {\n    },\n    item: {\n        display: 'block'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\nconst VaultTransactions: React.FC<Props> = ({ vault, classes }) => {\n    const [transactions, setTransactions] = React.useState<VaultAction[]>([])\n    const [proposals, setProposals] = React.useState<{vaultHash: string, transaction: VaultTransaction}[]>([])\n    const loadItems = React.useCallback(async () => {\n        try {\n            const transactions = await vault.loadTransactions()\n            await removeTransactionProposals(\n                vault, transactions.map((tx) => (tx.action === \"executed_transaction\") ? tx.vaultHash : \"\").filter((val) => val !== \"\")\n            )\n            setProposals(await loadTransactionProposals(vault))\n            setTransactions(transactions)\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n        }\n    }, [vault, setTransactions, setProposals])\n    React.useEffect(() => {\n        setProposals([])\n        setTransactions([])\n        loadItems()\n    }, [vault.address])\n    const listItems = transactions.map((tx) => {\n        switch (tx.action) {\n            case \"config_update\":\n                return (<ListItem className={classes.item}>\n                    <Box>Config Update</Box>\n                    <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{tx.txHash}</Box>\n                </ListItem>);\n            case \"executed_transaction\":\n                if (tx.success) {\n                    return (<Link to={location => `${location.pathname}/${tx.vaultHash}`}>\n                        <ListItem className={classes.item}>\n                            <Box>Tx success (nonce {tx.nonce.toString()})</Box>\n                            <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{tx.ethereumHash}</Box>\n                        </ListItem>\n                    </Link>);\n                } else {\n                    return (<Link to={location => `${location.pathname}/${tx.vaultHash}`}>\n                        <ListItem className={classes.item}>\n                            <Box>Tx failure (nonce {tx.nonce.toString()})</Box>\n                            <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{tx.ethereumHash}</Box>\n                        </ListItem>\n                    </Link >);\n                }\n        }\n    })\n    const proposalItems = proposals.map((proposal) => (\n        <Link to={location => `${location.pathname}/${proposal.vaultHash}`}>\n            <ListItem className={classes.item}><Box>Tx propsal (nonce {proposal.transaction.nonce})</Box></ListItem>\n        </Link>\n    ))\n    console.log({proposalItems})\n    return (proposalItems.length + transactions.length) > 0 ? (\n        <List className={classes.list}>\n            {\n                proposalItems.length > 0 && (\n                    <>\n                        <ListItem className={classes.item}><Typography>Proposals</Typography></ListItem>\n                        { proposalItems}\n                    </>\n                )\n            }\n            {\n                listItems.length > 0 && (\n                    <>\n                        <ListItem className={classes.item}><Typography>History</Typography></ListItem>\n                        { listItems}\n                    </>\n                )\n            }\n        </List>\n    ) : (\n            <p>No Transactions yet</p>\n        )\n}\n\nexport default withStyles(styles)(VaultTransactions)","import * as React from 'react'\nimport { Vault, VaultTransaction } from '@rmeissner/stateless-vault-sdk';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport WalletInfo from '../../WalletInfo'\nimport { createStyles, WithStyles, withStyles, Box, Typography } from '@material-ui/core';\nimport { loadTransactionDetails } from 'src/logic/vaultRepository';\nimport { utils } from 'ethers';\n\nconst styles = createStyles({\n    details: {\n        flex: 1\n    },\n    data: {\n        overflowWrap: 'anywhere',\n        maxWidth: '100vw'\n    },\n    address: {\n        display: 'flex',\n        justifyContent: 'center',\n        maxWidth: '100vw'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\ninterface Path {\n    vaultHash: string\n}\n\nconst VaultTransactionDetails: React.FC<Props> = ({ vault, classes }) => {\n    console.log(\"Load Transaction\")\n    const history = useHistory()\n    const { vaultHash } = useParams<Path>()\n    console.log(useParams<any>())\n    const [details, setDetails] = React.useState<VaultTransaction | undefined>(undefined)\n    const loadDetails = React.useCallback(async () => {\n        try {\n            setDetails(await loadTransactionDetails(vault, vaultHash))\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n            history.goBack()\n        }\n    }, [vault, vaultHash, setDetails])\n    console.log({ vaultHash })\n    React.useEffect(() => {\n        loadDetails()\n    }, [])\n    return details ? (\n        <Box className={classes.details}>\n            <p>Nonce</p>\n            <Typography>{details.nonce}</Typography>\n            <p>To</p>\n            <Box className={classes.address}><WalletInfo address={details.to} textColor=\"text\" /></Box>\n            <p>Value</p>\n            <Typography>{utils.formatEther(details.value)} ETH</Typography>\n            <p>Data</p>\n            <Typography className={classes.data}>{details.data}</Typography>\n            <p>Meta</p>\n            <Typography className={classes.data}>{details.meta}</Typography>\n            <p>Operation</p>\n            <Typography>{details.operation}</Typography>\n            <p>Min available gas</p>\n            <Typography>{details.minAvailableGas}</Typography>\n        </Box>\n    ) : (\n            <p>Loading details</p>\n        )\n}\n\nexport default withStyles(styles)(VaultTransactionDetails)","import * as React from 'react'\nimport { Button, createStyles, WithStyles, withStyles, TextField, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions } from '@material-ui/core'\nimport { useHistory } from 'react-router'\nimport { setVault, setLastSelectedVault, managesVault } from 'src/logic/vaultRepository'\nimport { utils } from 'ethers'\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n}\n\nconst AddVaultDialog: React.FC<Props> = ({ open, onClose }) => {\n    const history = useHistory()\n    const [vaultName, setVaultName] = React.useState(\"\")\n    const [vaultAddress, setVaultAddress] = React.useState(\"\")\n    const [inputError, setInputError] = React.useState<string | undefined>()\n    const addVault = React.useCallback(async () => {\n        try {\n            const cleanAddress = utils.getAddress(vaultAddress)\n            if (await managesVault(cleanAddress)) {\n                setInputError(\"Vault already exists in app\")\n                return\n            }\n            await setVault(cleanAddress, vaultName)\n            await setLastSelectedVault(cleanAddress)\n            onClose()\n            history.push(`/`)\n        } catch (e) {\n            console.error(e)\n            setInputError(\"Invalid vault address\")\n        }\n    }, [setInputError, vaultAddress, vaultName, history])\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Add a Vault</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    <TextField\n                        label=\"Vault name\"\n                        onChange={(e) => {\n                            setVaultName(e.target.value)\n                        }}>\n                        {vaultName}\n                    </TextField>\n                    <TextField\n                        label=\"Vault address\"\n                        onChange={(e) => {\n                            setVaultAddress(e.target.value)\n                            setInputError(undefined)\n                        }}\n                        error={inputError !== undefined}\n                        helperText={inputError}>\n                        {vaultAddress}\n                    </TextField>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={addVault} color=\"primary\">\n                    Add\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(AddVaultDialog)","import * as React from 'react'\nimport { Vault, VaultConfig } from '@rmeissner/stateless-vault-sdk'\nimport { Box, createStyles, WithStyles, withStyles, List, ListItem } from '@material-ui/core'\nimport WalletInfo from '../../WalletInfo'\nimport { getAppMnemonic, getAppSignerAddress } from 'src/logic/ethereumRepository'\nimport { Button } from '@gnosis.pm/safe-react-components'\n\nconst styles = createStyles({\n    list: {\n    },\n    content: {\n    },\n    item: {\n        display: 'flex',\n        justifyContent: 'center',\n        maxWidth: '100vw'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\nconst VaultSettings: React.FC<Props> = ({ vault, classes }) => {\n    const [localSigner, setLocalSigner] = React.useState<string | undefined>(undefined)\n    const [mnemonic, setMnemonic] = React.useState<string | undefined>(undefined)\n    const [configuration, setConfiguration] = React.useState<VaultConfig | undefined>(undefined)\n    const loadLocalSigner = React.useCallback(async () => {\n        try {\n            setLocalSigner(await getAppSignerAddress())\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n        }\n    }, [setLocalSigner])\n\n    const loadConfig = React.useCallback(async () => {\n        try {\n            setConfiguration(await vault.loadConfig())\n        } catch (e) {\n            console.log(`Could not load transactions`)\n            console.error(e)\n        }\n    }, [vault, setConfiguration])\n    \n    const toggleMnemonic = React.useCallback(async () => {\n        if (mnemonic) {\n            setMnemonic(undefined)\n        } else {\n            setMnemonic(await getAppMnemonic())\n        }\n    }, [mnemonic, setMnemonic])\n\n    React.useEffect(() => {\n        loadLocalSigner()\n        loadConfig()\n    }, [])\n\n    return configuration ? (\n        <div className={classes.content}>\n            { localSigner && (\n                <>\n                    <p>Local Signer</p>\n                    <Box>{localSigner}</Box>\n                </>\n            )}\n            <p>Threshold</p>\n            <Box>{configuration.threshold.toString()}</Box>\n            <p>Nonce</p>\n            <Box>{configuration.nonce.toString()}</Box>\n            <p>Signers</p>\n            <List className={classes.list}>\n                {configuration.signers.map((signer) => {\n                    return (\n                        <ListItem className={classes.item}><WalletInfo address={signer} textColor=\"text\" /></ListItem>\n                    )\n                })}\n            </List>\n            <p>Implementation</p>\n            <Box className={classes.item}><WalletInfo address={configuration.implementation} textColor=\"text\" /></Box>\n            <p>Menmonic</p>\n            <Box className={classes.item}>{mnemonic || \"************************\"}</Box>\n            <Button onClick={toggleMnemonic} size=\"md\" color=\"primary\">Toggle Mnemonic</Button>\n        </div>\n    ) : (\n            <p>Loading config</p>\n        )\n}\n\nexport default withStyles(styles)(VaultSettings)","import * as React from 'react'\nimport { Box, Button, createStyles, WithStyles, withStyles, List, ListItem, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions } from '@material-ui/core'\nimport { useHistory } from 'react-router'\nimport { loadLastSelectedVault, loadVaults, removeVault, removeLastSelectedVault, setLastSelectedVault } from 'src/logic/vaultRepository'\nimport AccountInfo from 'src/components/WalletInfo'\nimport { Delete } from '@material-ui/icons';\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n    onAdd?: () => void\n    onCreate?: () => void\n}\n\nconst VaultSelectionDialog: React.FC<Props> = ({ classes, open, onClose, onAdd, onCreate }) => {\n    const history = useHistory()\n    const [vaults, setVaults] = React.useState<{ address: string, name: string }[]>([])\n    const select = React.useCallback(async (address: string) => {\n        try {\n            await setLastSelectedVault(address)\n            history.push('/')\n        } catch (e) {\n            console.error(e)\n        }\n    }, [history])\n    const remove = React.useCallback(async (address: string) => {\n        try {\n            const lastVault = await loadLastSelectedVault()\n            if (lastVault === address) {\n                await removeLastSelectedVault()\n            }\n            await removeVault(address)\n            history.push('/')\n        } catch (e) {\n            console.error(e)\n        }\n    }, [history])\n    React.useEffect(() => {\n        console.log(\"init\")\n        const init = async () => {\n            try {\n                setVaults(await loadVaults())\n            } catch (e) {\n                onClose()\n            }\n        }\n        init()\n    }, [open])\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Select a Vault</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    <List>\n                        {vaults.map((vault) => (\n                            <ListItem onClick={() => select(vault.address)}>\n                                <Box className={classes.item}>\n                                    {vault.name}\n                                    <AccountInfo address={vault.address} textColor=\"text\" />\n                                </Box>\n                                <Button className={classes.remove} color=\"secondary\" onClick={() => remove(vault.address)}><Delete color=\"secondary\" /></Button>\n                            </ListItem>\n                        ))}\n                        {onAdd && (\n                            <ListItem>\n                                <Button onClick={() => { onAdd(); onClose() }} color=\"default\">Add vault</Button>\n                            </ListItem>\n                        )}\n                        {onCreate && (\n                            <ListItem>\n                                <Button onClick={() => { onCreate(); onClose() }} color=\"default\">Create vault</Button>\n                            </ListItem>\n                        )}\n                    </List>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\">\n                    Cancel\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(VaultSelectionDialog)","import {\n    getSDKVersion,\n    SDKMessageEvent,\n    MethodToResponse,\n    Methods,\n    SafeInfo,\n    MessageFormatter,\n    RequestId,\n    Transaction,\n    RPCPayload\n} from '@gnosis.pm/safe-apps-sdk'\nimport {\n    providers\n} from 'ethers'\n\nexport interface MessageHandlers {\n    onTransactionProposal: (transactions: Transaction[], requestId: RequestId) => void\n}\n\nexport class FrameCommunicator {\n    constructor(\n        readonly frame: React.RefObject<HTMLIFrameElement>,\n        readonly appUrl: string,\n        readonly info: SafeInfo,\n        readonly handlers: MessageHandlers,\n        readonly provider: providers.JsonRpcProvider\n    ) { }\n\n    handleMessage(\n        method: Methods,\n        params: unknown,\n        requestId: RequestId\n    ) {\n        if (!method) {\n            console.error('ThirdPartyApp: A message was received without message id.')\n            return\n        }\n        console.log(`Received ${method} with ${JSON.stringify(params)}`)\n\n        switch (method) {\n            case 'sendTransactions': {\n                if (params) {\n                    this.handlers.onTransactionProposal(\n                        // @ts-expect-error explore ways to fix this\n                        params.txs as Transaction[],\n                        requestId,\n                    )\n                }\n                break\n            }\n\n            case 'getEnvInfo': {\n                this.sendResponse({ txServiceUrl: \"\" }, requestId)\n                break\n            }\n\n            case 'getSafeInfo': {\n                this.sendResponse(this.info, requestId)\n                break\n            }\n\n            case 'rpcCall': {\n                const payload = params as RPCPayload\n                const communicator = this\n                try {\n                    this.provider.send(payload.call, payload.params).then(\n                        (resp: any) => {\n                            communicator.sendResponse(resp, requestId)\n                        }, (err: any) => {\n                            communicator.sendError(err, requestId)\n                        }\n                    )\n                } catch (err) {\n                    communicator.sendError(err, requestId)\n                }\n                break\n            }\n\n            default: {\n                console.error(`ThirdPartyApp: A message was received with an unknown method ${method}.`)\n                this.sendError(`Unknown method ${method}.`, requestId)\n                break\n            }\n        }\n    }\n\n    onMessage(message: SDKMessageEvent) {\n        if (message.source === window) {\n            return\n        }\n        if (!this.appUrl.includes(message.origin)) {\n            console.error(`ThirdPartyApp: A message was received from an unknown origin ${message.origin}`)\n            return\n        }\n        this.handleMessage(message.data.method, message.data.params, message.data.id)\n    }\n\n    sendResponse(\n        data: MethodToResponse[Methods],\n        requestId: RequestId\n    ) {\n        const frameWindow = this.frame.current?.contentWindow\n        if (!frameWindow) return\n        const sdkVersion = getSDKVersion()\n        const msg = MessageFormatter.makeResponse(requestId, data, sdkVersion)\n        frameWindow.postMessage(msg, this.appUrl)\n    }\n\n    sendError(\n        error: string,\n        requestId: RequestId\n    ) {\n        const frameWindow = this.frame.current?.contentWindow\n        if (!frameWindow) return\n        const sdkVersion = getSDKVersion()\n        const msg = MessageFormatter.makeErrorResponse(requestId, error, sdkVersion)\n        frameWindow.postMessage(msg, this.appUrl)\n    }\n\n    connect(defaultWindow?: Window): (() => void) | undefined {\n        const eventWindow = defaultWindow || this.frame.current?.contentWindow\n        if (!eventWindow) return\n        const callback = (ev: MessageEvent<any>) => { this.onMessage(ev) }\n        eventWindow.addEventListener('message', callback)\n        return () => {\n            eventWindow.removeEventListener('message', callback)\n        }\n    }\n}","import { RelayDeployment } from '@rmeissner/stateless-vault-sdk'\nimport { Vault, VaultTransaction } from '@rmeissner/stateless-vault-sdk'\nimport axios from 'axios'\nimport { BigNumber } from 'ethers'\nimport { buildMultiSend, decodeMultiSend } from 'src/components/vault/utils/multisend'\nimport { relayUrl } from 'src/utils/config'\n\nexport interface MetaTransaction {\n    to: string,\n    value: string,\n    data: string,\n    operation?: number\n}\n\nexport interface RelayEstimation {\n    fee: string,\n    feeReceiver: string,\n    transaction: MetaTransaction\n}\n\nconst sameTx = (left: MetaTransaction, right: MetaTransaction): boolean => {\n    if ((left.operation || 0) != (right.operation || 0)) return false\n    if (left.to.toLowerCase() !== right.to.toLowerCase()) return false\n    if (!BigNumber.from(left.value).eq(BigNumber.from(right.value))) return false\n    if (left.data.toLowerCase() !== right.data.toLowerCase()) return false\n    return true\n}\n\nexport const decodeAndCheckFee = async (estimate: RelayEstimation): Promise<MetaTransaction[]> => {\n    const transactions = await decodeMultiSend(estimate.transaction)\n    if (!BigNumber.from(estimate.fee).eq(BigNumber.from(0))) {\n        if (transactions.length < 2) throw Error(\"Unknown payment logic\")\n        const paymentTx = transactions[-1]\n        if (paymentTx.operation != 0) throw Error(\"Invalid payment tx operation\")\n        if (paymentTx.to.toLowerCase() != estimate.feeReceiver.toLowerCase()) throw Error(\"Invalid payment tx to\")\n        if (paymentTx.data != \"0x\") throw Error(\"Invalid payment tx data\")\n        if (!BigNumber.from(paymentTx.value).eq(BigNumber.from(estimate.fee))) throw Error(\"Invalid payment tx value\")\n    }\n    return transactions\n}\n\nconst checkFeeAndOptimize = async (tx: MetaTransaction, estimate: RelayEstimation): Promise<RelayEstimation> => {\n    if (BigNumber.from(estimate.fee).eq(BigNumber.from(0))) {\n        if (!sameTx(tx, estimate.transaction)) throw Error(\"Requested tx has been adjusted\")\n        return estimate\n    }\n    // If there is a fee we expect a multisig transaction\n    const transactionsWithPayment = await decodeMultiSend(estimate.transaction)\n    if (transactionsWithPayment.length != 2) throw Error(\"Unknown payment logic\")\n    if (!sameTx(tx, transactionsWithPayment[0])) throw Error(\"Requested tx has been adjusted\")\n    const paymentTx = transactionsWithPayment[1]\n    if (paymentTx.operation != 0) throw Error(\"Invalid payment tx operation\")\n    if (paymentTx.to.toLowerCase() != estimate.feeReceiver.toLowerCase()) throw Error(\"Invalid payment tx to\")\n    if (paymentTx.data != \"0x\") throw Error(\"Invalid payment tx data\")\n    if (!BigNumber.from(paymentTx.value).eq(BigNumber.from(estimate.fee))) throw Error(\"Invalid payment tx value\")\n    const requestedTransactions = await decodeMultiSend(tx)\n    return {\n        fee: estimate.fee,\n        feeReceiver: estimate.feeReceiver,\n        transaction: await buildMultiSend([...requestedTransactions, paymentTx])\n    }\n}\n\nexport const requestFee = async (tx: MetaTransaction): Promise<RelayEstimation> => {\n    const preparedTx = {\n        operation: 0,\n        ...tx\n    }\n    const response = await axios.post(`${relayUrl}/v1/transactions/prepare`, preparedTx)\n    return await checkFeeAndOptimize(preparedTx, response.data as RelayEstimation)\n}\n\nexport const relayTransaction = async (vault: Vault, transaction: VaultTransaction, signatures: string[]): Promise<string> => {\n    const execData = await vault.buildExecData(transaction, signatures)\n    const response = await axios.post(`${relayUrl}/v1/transactions/execute/vault`, execData)\n    return response.data\n}\n\nexport const relayCreation = async (data: RelayDeployment): Promise<string> => {\n    const transaction = {\n        safeTxGas: \"0x00\",\n        ...data.transaction\n    }\n    const response = await axios.post(`${relayUrl}/v1/deployment/execute`, {\n        ...data,\n        transaction\n    })\n    return response.data\n}","import * as React from 'react'\nimport { Vault, VaultSigner } from '@rmeissner/stateless-vault-sdk';\nimport { Box, Button, Checkbox, Typography, createStyles, withStyles, WithStyles, List, ListItem, CircularProgress, Dialog, DialogContent, DialogTitle, DialogActions } from '@material-ui/core'\nimport { RequestId, Transaction } from '@gnosis.pm/safe-apps-sdk'\nimport AccountInfo from 'src/components/WalletInfo';\nimport { utils, BigNumber } from 'ethers';\nimport { buildMultiSend, metaTxToVaultTx } from '../utils/multisend';\nimport { RelayEstimation, relayTransaction, requestFee } from 'src/logic/relayRepository';\nimport { addTransactionProposal } from 'src/logic/vaultRepository';\nimport { relayUrl } from 'src/utils/config';\nimport { getSignerAddress, loadSigner, hasAppSigner, setAppSigner } from 'src/logic/ethereumRepository';\n\nconst styles = createStyles({\n    item: {\n        display: 'block'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    vault: Vault,\n    transactions: Transaction[],\n    requestId: RequestId,\n    app?: string,\n    onConfirm: (requestId: RequestId, vaultHash: string) => void,\n    onReject: (requestId: RequestId, message: string) => void\n}\n\ninterface Estimate {\n    canSubmit: boolean,\n    nonce: BigNumber,\n    estimation: RelayEstimation\n}\n\nconst TransactionProposalDialog: React.FC<Props> = ({ classes, open, vault, transactions, requestId, app, onConfirm, onReject }) => {\n    const [submitTx, setSubmitTx] = React.useState(true)\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const [estimate, setEstimate] = React.useState<Estimate | undefined>(undefined)\n    const proposeTx = React.useCallback(async () => {\n        if (!estimate) return\n        setLoading(true)\n        try {\n            const meta = {\n                app: app,\n                fee: estimate.estimation.fee,\n                feeReceiver: estimate.estimation.feeReceiver,\n                relay: relayUrl\n            }\n            const vaultTx = metaTxToVaultTx(estimate.estimation.transaction, estimate.nonce, meta)\n            const vaultHash = await addTransactionProposal(vault, vaultTx)\n            const signer = loadSigner()\n            if (submitTx && signer) {\n                const vaultSigner = new VaultSigner(vault, signer)\n                // Lets not wait\n                relayTransaction(vault, vaultTx, [await vaultSigner.signTx(vaultTx)]).then(\n                    (resp) => {\n                        console.log(resp)\n                    }, (error) => {\n                        console.error(error)\n                    }\n                )\n            }\n            onConfirm(requestId, vaultHash)\n        } catch (e) {\n            console.error(e)\n        }\n        setLoading(false)\n    }, [vault, app, requestId, estimate, submitTx, onConfirm])\n    const estimateTx = React.useCallback(async () => {\n        setLoading(true)\n        try {\n            const config = await vault.loadConfig()\n            const signerAddress = await getSignerAddress()\n            if (!signerAddress && hasAppSigner()) {\n                await setAppSigner()\n            }\n            const canSubmit = config.threshold.eq(BigNumber.from(1)) && !!signerAddress && config.signers.indexOf(signerAddress) >= 0\n            const transaction = await buildMultiSend(transactions)\n            const estimation = await requestFee(transaction)\n            setEstimate({\n                canSubmit,\n                estimation,\n                nonce: config.nonce\n            })\n        } catch (e) {\n            console.error(e)\n        }\n        setLoading(false)\n    }, [vault, transactions])\n    React.useEffect(() => {\n        estimateTx()\n    }, [estimateTx])\n    const rejectTx = React.useCallback(async () => {\n        setEstimate(undefined)\n        onReject(requestId, \"User rejected transaction\")\n    }, [requestId, onReject])\n    return (\n        <Dialog\n            open={open}\n            onClose={rejectTx}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Confirm Transaction</DialogTitle>\n            <DialogContent dividers={true}>\n                {loading ? (\n                    <CircularProgress />\n                ) : (\n                        <List>\n                            {transactions.map((transaction) => (\n                                <ListItem className={classes.item}>\n                                    <Box><AccountInfo address={transaction.to} textColor=\"text\" /></Box>\n                                    <Typography>{utils.formatEther(transaction.value)} ETH</Typography>\n                                    <Box textOverflow=\"ellipsis\" overflow=\"hidden\">{transaction.data}</Box>\n                                </ListItem>\n                            ))}\n                        </List>\n                    )}\n            </DialogContent>\n            { estimate?.canSubmit && (\n                <Box>\n                    Submit transaction via Relay for {utils.formatEther(estimate.estimation.fee)} ETH\n                    <Checkbox checked={submitTx} onChange={(_e, checked) => setSubmitTx(checked)} />\n                </Box>\n            )\n            }\n            <DialogActions>\n                <Button onClick={rejectTx} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={proposeTx} color=\"primary\" disabled={!estimate || !estimate.canSubmit || loading}>\n                    Confirm\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(TransactionProposalDialog)","import { Button } from '@gnosis.pm/safe-react-components'\nimport * as React from 'react'\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { chainId, rpcUrl } from 'src/utils/config';\n\ntype Props = {\n  onConnect: (provider: any) => void,\n  onDialogOpen?: (visible: boolean) => void\n}\n\nconst ConnectButton: React.FC<Props> = ({ onConnect, onDialogOpen }) => {\n  const connect = React.useCallback(async () => {\n    const web3Modal = new Web3Modal({\n      network: \"rinkeby\",\n      //cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            rpc: rpcUrl,\n            chainId: chainId\n          }\n        }\n      }\n    });\n    if (onDialogOpen) onDialogOpen(true)\n    try { onConnect(await web3Modal.connect()) }\n    catch (e) {\n      console.log('Web3Connect Modal Closed: ', e) // modal has closed\n    } finally {\n      if (onDialogOpen) onDialogOpen(false)\n    }\n  }, [onConnect])\n  return (\n    <Button size=\"lg\" color=\"primary\" onClick={connect}>\n      Connect\n    </Button>\n  )\n}\n\nexport default ConnectButton\n","import * as React from 'react'\nimport { Box, Button } from '@material-ui/core'\nimport { providers } from 'ethers';\nimport { getSignerAddress, setLocalSigner, setAppSigner } from 'src/logic/ethereumRepository';\nimport ConnectButton from '../ConnectButton';\n\ninterface Props {\n    onProgress: (active: boolean) => void,\n    onSelected: (signerAddress: string | undefined) => void,\n    onWalletDialogVisible?: (visible: boolean) => void\n}\n\nconst SelectAccount: React.FC<Props> = ({ onProgress, onSelected, onWalletDialogVisible }) => {\n    const useAppAccount = React.useCallback(async () => {\n        onProgress(true)\n        try {\n            await setAppSigner()\n            onSelected(await getSignerAddress())\n        } catch (e) {\n            console.error(e)\n        }\n        onProgress(false)\n    }, [onProgress, onSelected])\n    const onConnect = React.useCallback(async (web3provider: any) => {\n        onProgress(true)\n        try {\n            const provider = new providers.Web3Provider(web3provider)\n            setLocalSigner(provider.getSigner())\n            onSelected(await getSignerAddress())\n        } catch (e) {\n            console.error(e)\n        }\n        onProgress(false)\n    }, [onProgress, onSelected])\n    return (\n        <Box>\n            <Button onClick={useAppAccount} color=\"primary\">Use App Account</Button>\n            <br />\n            <ConnectButton onConnect={onConnect} onDialogOpen={onWalletDialogVisible} />\n        </Box>\n    )\n}\n\nexport default SelectAccount","import * as React from 'react'\nimport { Vault } from '@rmeissner/stateless-vault-sdk';\nimport { CircularProgress, createStyles, WithStyles, withStyles } from '@material-ui/core';\nimport { FrameCommunicator } from './messaging';\nimport { chainName, defaultAppUrl } from 'src/utils/config';\nimport TransactionProposalDialog from './TransactionProposalDialog';\nimport {\n    LowercaseNetworks,\n    RequestId,\n    Transaction\n} from '@gnosis.pm/safe-apps-sdk'\nimport { getSignerAddress, loadProvider } from 'src/logic/ethereumRepository';\nimport SelectAccount from 'src/components/account/SelectAccount';\n\nconst styles = createStyles({\n    appContainer: {\n        border: 0,\n        frameborder: 0,\n        width: '100%',\n        height: '100%'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    vault: Vault\n}\n\ninterface ProposalParams {\n    transactions: Transaction[]\n    requestId: RequestId\n}\n\nconst VaultApps: React.FC<Props> = ({ vault, classes }) => {\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const [signerAddress, setSignerAddress] = React.useState<string | undefined>(undefined)\n    const [canUseApps, setCanUseApps] = React.useState<boolean>(false)\n    const [proposalParams, setProposalParams] = React.useState<ProposalParams | undefined>(undefined)\n    const appUrl = defaultAppUrl\n    const appFrame = React.useRef<HTMLIFrameElement>(null)\n    const communicator: FrameCommunicator = React.useMemo(() => {\n        return new FrameCommunicator(appFrame, appUrl, {\n            safeAddress: vault.address,\n            network: chainName as LowercaseNetworks,\n            ethBalance: \"0\",\n        }, {\n            onTransactionProposal: (transactions, requestId) => {\n                if (transactions.length == 0) return\n                setProposalParams({ transactions, requestId })\n            }\n        }, loadProvider())\n    }, [vault, appFrame, appUrl, setProposalParams])\n\n    const handleTransactionConfirmation = React.useCallback(async (requestId: RequestId, vaultHash: string) => {\n        communicator.sendResponse({ safeTxHash: vaultHash }, requestId)\n        setProposalParams(undefined)\n    }, [communicator, setProposalParams])\n\n    const handleTransactionRejection = React.useCallback(async (requestId: RequestId, message: string) => {\n        communicator.sendError(message, requestId)\n        setProposalParams(undefined)\n    }, [communicator, setProposalParams])\n\n    React.useEffect(() => {\n        return communicator.connect(window)\n    }, [communicator])\n\n    React.useEffect(() => {\n        const loadSigner = async () => {\n            setLoading(true)\n            try {\n                const signerAddress = await getSignerAddress()\n                setSignerAddress(signerAddress)\n            } catch (e) {\n                console.error(e)\n            } finally {\n                setLoading(false)\n            }\n        }\n        loadSigner()\n    }, [setSignerAddress])\n\n    React.useEffect(() => {\n        if (!signerAddress) return\n        const checkSigner = async () => {\n            setLoading(true)\n            try {\n                const config = await vault.loadConfig()\n                setCanUseApps(config.signers.indexOf(signerAddress) >= 0)\n            } catch (e) {\n                console.error(e)\n            } finally {\n                setLoading(false)\n            }\n        }\n        checkSigner()\n    }, [vault, signerAddress])\n\n    if (loading) return (<CircularProgress />)\n    if (!signerAddress) return (<SelectAccount onProgress={setLoading} onSelected={setSignerAddress} />)\n    if (!canUseApps) return (<p>You need to be an owner to use Apps</p>)\n    return (\n        <>\n            <iframe ref={appFrame} src={appUrl} className={classes.appContainer} />\n            { proposalParams && (<TransactionProposalDialog\n                open={true}\n                vault={vault}\n                app={appUrl}\n                transactions={proposalParams.transactions}\n                requestId={proposalParams.requestId}\n                onReject={handleTransactionRejection}\n                onConfirm={handleTransactionConfirmation} />\n            )}\n        </>\n    )\n}\n\nexport default withStyles(styles)(VaultApps)","import * as React from 'react'\nimport { RelayedVaultFactory } from '@rmeissner/stateless-vault-sdk';\nimport { Box, Button, createStyles, withStyles, WithStyles, Dialog, DialogContent, DialogTitle, DialogActions, CircularProgress } from '@material-ui/core'\nimport AccountInfo from 'src/components/WalletInfo';\nimport { utils, BigNumber } from 'ethers';\nimport { relayCreation, RelayEstimation, requestFee } from 'src/logic/relayRepository';\nimport { loadProvider, loadSigner } from 'src/logic/ethereumRepository';\nimport { factoryAddress, vaultImplementationAddress } from 'src/utils/config';\nimport { setLastSelectedVault, setVault } from 'src/logic/vaultRepository';\nimport { useHistory } from 'react-router';\nimport SelectAccount from 'src/components/account/SelectAccount';\n\nconst styles = createStyles({\n    item: {\n        display: 'block'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n}\n\ninterface Estimate {\n    nonce: string,\n    factory: RelayedVaultFactory,\n    address: string,\n    estimation: RelayEstimation\n}\n\nconst VaultCreationDialog: React.FC<Props> = ({ open, onClose }) => {\n    const history = useHistory()\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const [showConnectModal, setShowConnectModal] = React.useState<boolean>(false)\n    const [signer, setSigner] = React.useState<string | undefined>(undefined)\n    const [estimate, setEstimate] = React.useState<Estimate | undefined>(undefined)\n    const handleClose = React.useCallback(async () => {\n        setSigner(undefined)\n        onClose()\n    }, [onClose])\n\n    const activateVault = React.useCallback(async (address: string) => {\n        await setVault(address, \"My App Vault\")\n        await setLastSelectedVault(address)\n        history.push('/')\n        handleClose()\n    }, [handleClose])\n\n    const createVault = React.useCallback(async () => {\n        if (!estimate) return\n        const localSigner = loadSigner()\n        if (!localSigner) return\n        const provider = loadProvider()\n        setLoading(true)\n        try {\n            const relayData = await estimate.factory.relayData(\n                localSigner, { operation: 0, ...estimate.estimation.transaction }, estimate.nonce\n            )\n            const vaultBalance = await provider.getBalance(estimate.address)\n            if (vaultBalance < BigNumber.from(estimate.estimation.fee)) throw Error(`Not enough funds to deploy to ${estimate.address} (${utils.formatEther(vaultBalance)} < ${utils.formatEther(estimate.estimation.fee)})`)\n            const deploymentTxHash = await relayCreation(relayData)\n            const deploymentTx = await provider.getTransaction(deploymentTxHash)\n            await deploymentTx.wait()\n            await activateVault(estimate.address)\n        } catch (e) {\n            console.error(e)\n        }\n        setLoading(false)\n    }, [estimate, activateVault, history])\n    const estimateCreation = React.useCallback(async () => {\n        if (!signer) return\n        setLoading(true)\n        try {\n            const factory = new RelayedVaultFactory({\n                factoryAddress: factoryAddress,\n                vaultImplementationAddress: vaultImplementationAddress,\n                provider: loadProvider()\n            })\n            const signers = [signer]\n            const setupData = await factory.creationData({\n                signers: signers,\n                threshold: BigNumber.from(1)\n            })\n            const nonce = factory.saltNonce(\"LEEEEEERRRROOOOOOOYYYYY JENKIIIIIIIIIIIINS\")\n            const estimation = await requestFee({\n                to: vaultImplementationAddress,\n                value: \"0x0\",\n                data: setupData,\n                operation: 1\n            })\n            const address = await factory.calculateAddress(nonce, signers)\n            const provider = loadProvider()\n            const code = await provider.getCode(address)\n            if (code != \"0x\") await activateVault(address)\n            else {\n                setEstimate({\n                    nonce,\n                    factory,\n                    address,\n                    estimation\n                })\n            }\n        } catch (e) {\n            console.error(e)\n        }\n        setLoading(false)\n    }, [signer, setEstimate])\n    React.useEffect(() => {\n        estimateCreation()\n    }, [estimateCreation])\n    return (\n        <Dialog\n            open={open && !showConnectModal}\n            onClose={handleClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Confirm Transaction</DialogTitle>\n            <DialogContent dividers={true}>\n                {loading ? (\n                    <CircularProgress />\n                ) : (\n                        signer ? (\n                            <Box>\n                                Owner:<br /><AccountInfo address={signer} textColor=\"text\" />\n                                { estimate ? (\n                                <>\n                                    Vault:<br /><AccountInfo address={estimate.address} textColor=\"text\" />\n                                    <br />\n                                    Fee: { utils.formatEther(estimate.estimation.fee)} ETH\n                                </>) : (<>Loading...</>)}\n                            </Box>\n                        ) : (<SelectAccount onProgress={setLoading} onSelected={setSigner} onWalletDialogVisible={setShowConnectModal} />)\n                    )}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={createVault} color=\"primary\" disabled={!estimate || loading}>\n                    Confirm\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(VaultCreationDialog)","import * as React from 'react'\nimport WalletInfo from 'src/components/WalletInfo'\nimport { Vault } from '@rmeissner/stateless-vault-sdk';\nimport { Redirect, Route, Switch, useHistory, useParams, useRouteMatch } from \"react-router-dom\";\nimport { AppBar, BottomNavigation, BottomNavigationAction, Container, createStyles, Toolbar, WithStyles, withStyles } from '@material-ui/core';\nimport { Timeline, Settings, ArrowDropDown, Apps } from '@material-ui/icons';\nimport { getVaultInstance } from 'src/logic/vaultRepository';\nimport styled from 'styled-components'\nimport VaultTransactions from './transactions/VaultTransactions';\nimport VaultTransactionDetails from './transactions/VaultTransactionDetails';\nimport AddVaultDialog from './settings/AddVaultDialog';\nimport VaultSettings from './settings/VaultSettings';\nimport VaultSelectionDialog from './settings/VaultSelectionDialog';\nimport VaultApps from './apps/VaultApps';\nimport VaultCreationDialog from './settings/VaultCreationDialog';\n\nconst styles = createStyles({\n    title: {\n        flex: 1\n    },\n    toolbar: {\n        maxWidth: '100vw',\n        background: '#ffffff'\n    },\n    content: {\n        paddingBottom: '64px',\n        flex: \"1 1 auto\",\n        maxWidth: '100vw'\n    },\n    navigation: {\n        height: '64px',\n        position: 'fixed',\n        bottom: 0,\n        width: '100vw'\n    }\n})\n\nconst VaultHomeContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: top;\n  text-align: center;\n  flex-grow: 1;\n  width: 100vw;\n  height: 100vh;\n`\n\ninterface Active {\n    address: string,\n    instance: Vault\n}\n\ninterface Path {\n    vaultAddress: string\n}\n\nconst VaultHome: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n    const match = useRouteMatch()\n    const [active, setActive] = React.useState<Active | undefined>(undefined)\n    const [showVaultSelection, setShowVaultSelection] = React.useState(false)\n    const [showVaultCreation, setShowVaultCreation] = React.useState(false)\n    const [showAddVault, setShowAddVault] = React.useState(false)\n    const history = useHistory()\n    const { vaultAddress } = useParams<Path>()\n    React.useEffect(() => {\n        const loadActive = async () => {\n            try {\n                const instance = await getVaultInstance(vaultAddress)\n                setActive({\n                    address: vaultAddress,\n                    instance\n                })\n            } catch (e) {\n                console.log(`Could not load Vault ${vaultAddress}`)\n                console.error(e)\n                history.push(`/`)\n            }\n        }\n        loadActive()\n    }, [vaultAddress, setActive])\n    if (!active) return (<>Loading</>)\n    return (\n        <VaultHomeContainer>\n            <AppBar position=\"fixed\">\n                <Toolbar className={classes.toolbar}>\n                    <WalletInfo address={active.address!} className={classes.title} textColor=\"text\" />\n                    <ArrowDropDown color=\"action\" onClick={() => setShowVaultSelection(true)} />\n                </Toolbar>\n            </AppBar>\n            <Toolbar />\n            <Container className={classes.content}>\n                <Switch>\n                    <Route path={`${match.path}/transactions/:vaultHash`}>\n                        <VaultTransactionDetails vault={active.instance} />\n                    </Route>\n                    <Route path={`${match.path}/transactions`}>\n                        <VaultTransactions vault={active.instance} />\n                    </Route>\n                    <Route path={`${match.path}/config`}>\n                        <VaultSettings vault={active.instance} />\n                    </Route>\n                    <Route path={`${match.path}/apps`}>\n                        <VaultApps vault={active.instance} />\n                    </Route>\n                    <Route path=\"*\">\n                        <Redirect to={`${match.url}/transactions`} />\n                    </Route>\n                </Switch>\n            </Container>\n            <BottomNavigation\n                className={classes.navigation}\n                onChange={(_, newValue) => {\n                    switch (newValue) {\n                        case 1:\n                            history.push(`${match.url}/apps`)\n                            break;\n                        case 2:\n                            history.push(`${match.url}/config`)\n                            break;\n                        default:\n                            history.push(`${match.url}/transactions`)\n                            break;\n                    }\n                }}\n                showLabels\n            >\n                <BottomNavigationAction label=\"Transactions\" icon={<Timeline />} />\n                <BottomNavigationAction label=\"Apps\" icon={<Apps />} />\n                <BottomNavigationAction label=\"Settings\" icon={<Settings />} />\n            </BottomNavigation>\n            <VaultSelectionDialog open={showVaultSelection} onClose={() => setShowVaultSelection(false)} onAdd={() => setShowAddVault(true)} onCreate={() => setShowVaultCreation(true)} />\n            <VaultCreationDialog open={showVaultCreation} onClose={() => setShowVaultCreation(false)} />\n            <AddVaultDialog open={showAddVault} onClose={() => setShowAddVault(false)} />\n        </VaultHomeContainer>\n    )\n}\n\nexport default withStyles(styles)(VaultHome)","export default __webpack_public_path__ + \"static/media/yacate-logo.30ab8735.svg\";","export const undefinedOnError = async<T>(func: Promise<T>): Promise<T | undefined> => {\n    try {\n        return await func\n    } catch (e) {\n        console.error(e)\n        return undefined\n    }\n}","import AppLogo from 'src/assets/icons/yacate-logo.svg'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport { TextField } from '@material-ui/core'\nimport { utils } from 'ethers'\nimport { Button } from '@gnosis.pm/safe-react-components'\nimport { loadLastSelectedVault, loadVaults, setLastSelectedVault, setVault } from 'src/logic/vaultRepository'\nimport { useHistory } from 'react-router'\nimport { undefinedOnError } from 'src/utils/general'\nimport VaultCreationDialog from '../vault/settings/VaultCreationDialog'\n\nconst OnboardingContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: center;\n  text-align: center;\n`\n\nconst SHeading = styled.h1`\n@media screen and (max-width: 768px) {\n  font-size: 1.2em;\n}\n`\n\nconst Welcome: React.FC = () => {\n  const history = useHistory()\n  const [loading, setLoading] = React.useState(true)\n  const [vaultName, setVaultName] = React.useState(\"\")\n  const [vaultAddress, setVaultAddress] = React.useState(\"\")\n  const [inputError, setInputError] = React.useState<string | undefined>()\n  const [showVaultCreation, setShowVaultCreation] = React.useState(false)\n  const addVault = React.useCallback(async () => {\n    try {\n      const cleanAddress = utils.getAddress(vaultAddress)\n      await setVault(cleanAddress, vaultName)\n      await setLastSelectedVault(cleanAddress)\n      history.replace(`/${cleanAddress}`)\n    } catch (e) {\n      console.error(e)\n      setInputError(\"Invalid vault address\")\n    }\n  }, [setInputError, vaultAddress, vaultName, history])\n\n  const loadSelected = React.useCallback(async () => {\n    setLoading(true)\n    let selectedVault = await undefinedOnError(loadLastSelectedVault())\n    if (!selectedVault) {\n      const vaults = await loadVaults()\n      if (vaults.length > 0) {\n        selectedVault = vaults[0].address\n        await setLastSelectedVault(selectedVault)\n      }\n    }\n    if (selectedVault) {\n      history.replace(`/${selectedVault}`)\n    }\n    setLoading(false)\n  }, [history, setLoading])\n\n  React.useEffect(() => {\n    loadSelected()\n  }, [loadSelected])\n\n  if (loading) return (\n    <OnboardingContainer>\n      <img src={AppLogo} alt=\"App Logo\" width=\"100\"></img>\n      <SHeading>Yacate - A smart wallet based on the Stateless Vault</SHeading>\n      <p>Loading</p>\n    </OnboardingContainer>\n  )\n  return (\n    <OnboardingContainer>\n      <img src={AppLogo} alt=\"App Logo\" width=\"100\"></img>\n      <SHeading>Yacate - A smart wallet based on the Stateless Vault</SHeading>\n      <p>Start by adding a Vault</p>\n      <TextField\n        label=\"Vault name\"\n        onChange={(e) => {\n          setVaultName(e.target.value)\n        }}>\n        {vaultName}\n      </TextField>\n      <TextField\n        label=\"Vault address\"\n        onChange={(e) => {\n          setVaultAddress(e.target.value)\n          setInputError(undefined)\n        }}\n        error={inputError !== undefined}\n        helperText={inputError}>\n        {vaultAddress}\n      </TextField>\n      <Button size=\"lg\" color=\"primary\" onClick={addVault}>Add Vault</Button>\n      <Button size=\"lg\" color=\"secondary\" onClick={() => setShowVaultCreation(true)}>Create Vault</Button>\n      <VaultCreationDialog open={showVaultCreation} onClose={() => setShowVaultCreation(false)} />\n    </OnboardingContainer>\n  )\n}\n\nexport default Welcome","import React from 'react'\nimport { Route, Switch, HashRouter as Router } from \"react-router-dom\"\nimport VaultHome from './vault/VaultHome'\nimport Welcome from './onboarding/Welcome'\n\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:vaultAddress\">\n          <VaultHome />\n        </Route>\n        <Route path=\"/\">\n          <Welcome />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport { createGlobalStyle } from 'styled-components'\nimport { normalize } from 'styled-normalize'\n\nconst GlobalStyles = createGlobalStyle`\n  ${normalize}\n\n  @font-face {\n    font-family: 'Averta';\n    font-display: swap;\n    src: local('Averta'), local('Averta Bold'),\n    url(${avertaFont}) format('woff2'),\n    url(${avertaBoldFont}) format('woff');\n  }\n\n  body {\n    font-family: 'Averta', sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n    background: #fefefe;\n  }\n\n  .web3connect-connect-button {\n    background-color: #008c73 !important;\n  }\n\n  .walletconnect-qrcode__base {\n    left: 0;\n  }\n\n  a {\n    color: #008c73;\n  }\n\n  .address p {\n    font-family: 'Roboto', monospace;\n  }\n`\n\nexport default GlobalStyles\n","import { theme } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport App from 'src/components/App'\nimport GlobalStyles from 'src/styles/global'\nimport { ThemeProvider } from 'styled-components'\n\nconst Root: React.FC = () => (\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n)\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './Root'\nimport * as serviceWorker from './serviceWorkerRegistraction'\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { VaultTransaction } from '@rmeissner/stateless-vault-sdk'\nimport { BigNumber, utils, } from 'ethers'\nimport { MetaTransaction } from 'src/logic/relayRepository'\nimport { multiSendAddress } from 'src/utils/config'\nimport multiSendAbi from './multisend.json'\n\nconst multiSendInterface = new utils.Interface(multiSendAbi)\n\nexport const metaTxToVaultTx = (metaTx: MetaTransaction, nonce: BigNumber, meta: any | undefined): VaultTransaction => {\n    const metaString = meta ? JSON.stringify(meta) : undefined\n    return {\n        to: metaTx.to,\n        value: metaTx.value,\n        data: metaTx.data,\n        operation: metaTx.operation || 0,\n        minAvailableGas: \"0x00\",\n        nonce: nonce.toHexString(),\n        metaHash: \"\", // Will be set by repo,\n        meta: metaString\n    }\n}\n\nconst removeHexPrefix = (input: string) => input.toLowerCase().startsWith(\"0x\") ? input.slice(2) : input;\n\nconst encodeData = function (operation: number, to: string, value: string, data: string) {\n    let dataBuffer = Buffer.from(removeHexPrefix(data), \"hex\")\n    return removeHexPrefix(utils.solidityPack(\n        [\"uint8\", \"address\", \"uint256\", \"uint256\", \"bytes\"],\n        [operation, to, BigNumber.from(value).toHexString(), dataBuffer.length, dataBuffer]\n    ))\n}\n\nexport const buildMultiSend = async (transactions: MetaTransaction[]): Promise<MetaTransaction> => {\n    if (transactions.length < 0) throw Error(\"Cannot encode empty transactions\")\n    if (transactions.length == 1) return {\n        ...transactions[0],\n        value: BigNumber.from(transactions[0].value).toHexString()\n    }\n    let multiSendBytes = \"0x\"\n    for (let transaction of transactions) {\n        multiSendBytes += encodeData(0, transaction.to, transaction.value, transaction.data)\n    }\n    const multiSendData = multiSendInterface.encodeFunctionData(\"multiSend\", [multiSendBytes])\n    return {\n        to: multiSendAddress,\n        value: \"0x00\",\n        data: multiSendData,\n        operation: 1\n    }\n}\n\n/**\n * Methods tries to decode multisend. If no multisend is detected the original transaction is returned.\n * @param transaction Meta transaction that should be decoded\n */\nexport const decodeMultiSend = async (transaction: MetaTransaction): Promise<MetaTransaction[]> => {\n    if (transaction.operation != 1) return [transaction]\n    if (transaction.to.toLowerCase() !== multiSendAddress.toLowerCase()) return [transaction]\n    if (!BigNumber.from(transaction.value).eq(BigNumber.from(0))) return [transaction]\n    try {\n        const transactions = []\n        const [multiSendBytes] = multiSendInterface.decodeFunctionData(\"multiSend\", transaction.data)\n        const rawData = removeHexPrefix(multiSendBytes)\n        let index = 0;\n        while (index < rawData.length) {\n            const operation = parseInt(rawData.slice(index, index += 2), 16)\n            const to = utils.getAddress(\"0x\" + rawData.slice(index, index += 40))\n            const value = BigNumber.from(\"0x\" + rawData.slice(index, index += 64)).toHexString()\n            const dataLength = parseInt(rawData.slice(index, index += 64), 16) * 2\n            const data = \"0x\" + rawData.slice(index, index += dataLength)\n            transactions.push({\n                to,\n                value,\n                operation,\n                data\n            })\n        }\n        return transactions\n    } catch (e) {\n        console.error(e)\n    }\n    return [transaction]\n}","import FactoryAbi from './abis/Factory.json';\nimport EIP712Domain from \"eth-typed-data\";\nimport { Contract, constants, utils, BigNumber } from 'ethers';\nimport { buildValidationData } from './utils/proof';\nimport { pullWithKeccak } from './utils/ipfs';\nimport { prepareEthSignSignatureForSafe } from './utils/signatures';\nimport StatelessVault from '@rmeissner/stateless-vault-contracts/build/contracts/StatelessVault.json';\nimport RelayedFactory from '@rmeissner/stateless-vault-contracts/build/contracts/ProxyFactoryWithInitializor2.json';\nexport { pullWithKeccak };\nexport class BaseFactory {\n    constructor() {\n        this.vaultInterface = Contract.getInterface(StatelessVault.abi);\n    }\n    async creationData(vaultSetup) {\n        return this.vaultInterface.encodeFunctionData(\"setup(address[],uint256,address,address,address)\", [vaultSetup.signers, vaultSetup.threshold, constants.AddressZero, constants.AddressZero, constants.AddressZero]);\n    }\n}\nexport class LocalVaultFactory extends BaseFactory {\n    constructor(config) {\n        super();\n        this.config = config;\n        this.factoryInstance = new Contract(config.factoryAddress, FactoryAbi, config.signer);\n    }\n    async calculateAddress(initializer, saltNonce) {\n        const initializerHash = utils.solidityKeccak256([\"bytes\"], [initializer]);\n        const salt = utils.solidityKeccak256(['bytes32', 'uint256'], [initializerHash, saltNonce]);\n        const proxyCreationCode = await this.factoryInstance.proxyCreationCode();\n        const proxyDeploymentCode = utils.solidityPack(['bytes', 'uint256'], [proxyCreationCode, this.config.vaultImplementationAddress]);\n        const proxyDeploymentCodeHash = utils.solidityKeccak256([\"bytes\"], [proxyDeploymentCode]);\n        const address = utils.solidityKeccak256(['bytes1', 'address', 'bytes32', 'bytes32'], [\"0xFF\", this.config.factoryAddress, salt, proxyDeploymentCodeHash]);\n        return \"0x\" + address.slice(-40);\n    }\n    async create(vaultSetup, saltString) {\n        const initializer = await this.creationData(vaultSetup);\n        const saltNonce = utils.keccak256(Buffer.from(saltString || `${new Date()}`));\n        try {\n            const tx = await this.factoryInstance.createProxyWithNonce(this.config.vaultImplementationAddress, initializer, saltNonce);\n            await tx.wait();\n            console.log(tx);\n        }\n        catch (e) { }\n        const address = await this.calculateAddress(initializer, saltNonce);\n        return new Vault(this.config.signer.provider, address);\n    }\n}\nexport class RelayedVaultFactory extends BaseFactory {\n    constructor(config) {\n        super();\n        this.config = config;\n        this.factoryInstance = new Contract(config.factoryAddress, RelayedFactory.abi, config.provider);\n    }\n    async calculateAddress(saltNonce, validators) {\n        return await this.factoryInstance.callStatic.calculateProxyAddress(validators, saltNonce);\n    }\n    saltNonce(saltString) {\n        return utils.keccak256(Buffer.from(saltString || `${new Date()}`));\n    }\n    async relayData(validator, setupTransaction, saltNonce) {\n        const validatorAddress = await validator.getAddress();\n        const vaultAddress = await this.calculateAddress(saltNonce, [validatorAddress]);\n        const setupHash = await this.factoryInstance.callStatic.generateSetupHash(vaultAddress, this.config.vaultImplementationAddress, setupTransaction.to, setupTransaction.value, setupTransaction.data, setupTransaction.operation, utils.solidityPack([\"address[]\"], [[validatorAddress]]));\n        const signatures = prepareEthSignSignatureForSafe(await validator.signMessage(utils.arrayify(setupHash)));\n        return {\n            implementation: this.config.vaultImplementationAddress,\n            transaction: setupTransaction,\n            validators: [validatorAddress],\n            signatures,\n            nonce: saltNonce\n        };\n    }\n}\nexport var VaultTransactionStatus;\n(function (VaultTransactionStatus) {\n    VaultTransactionStatus[VaultTransactionStatus[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    VaultTransactionStatus[VaultTransactionStatus[\"FAILED\"] = 1] = \"FAILED\";\n    VaultTransactionStatus[VaultTransactionStatus[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n})(VaultTransactionStatus || (VaultTransactionStatus = {}));\nexport class Vault {\n    constructor(provider, vaultAddress) {\n        this.address = vaultAddress;\n        this.vaultInstance = new Contract(vaultAddress, StatelessVault.abi, provider);\n    }\n    async loadTransactions() {\n        const txs = [];\n        const configTopic = this.vaultInstance.interface.getEventTopic(\"Configuration\");\n        const failedTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionFailure\");\n        const successTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionSuccess\");\n        const events = await this.vaultInstance.queryFilter({\n            address: this.vaultInstance.address,\n            topics: [\n                [\n                    configTopic, failedTopic, successTopic\n                ]\n            ]\n        });\n        for (const e of events) {\n            if (e.topics[0] == configTopic) {\n                const config = this.vaultInstance.interface.decodeEventLog(\"Configuration\", e.data, e.topics);\n                if (config.currentNonce.eq(0)) {\n                    txs.push({\n                        action: \"config_update\",\n                        txHash: e.transactionHash\n                    });\n                }\n                else {\n                    txs.push({\n                        action: \"config_update\",\n                        txHash: e.transactionHash,\n                        nonce: config.currentNonce - 1\n                    });\n                }\n            }\n            else if (e.topics[0] == failedTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionFailure\", e.data, e.topics);\n                txs.push({\n                    action: \"executed_transaction\",\n                    vaultHash: exec.txHash,\n                    ethereumHash: e.transactionHash,\n                    nonce: exec.usedNonce,\n                    success: false\n                });\n            }\n            else if (e.topics[0] == successTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionSuccess\", e.data, e.topics);\n                txs.push({\n                    action: \"executed_transaction\",\n                    vaultHash: exec.txHash,\n                    ethereumHash: e.transactionHash,\n                    nonce: exec.usedNonce,\n                    success: true\n                });\n            }\n        }\n        return txs.reverse();\n    }\n    async loadTransactionState(vaultHash) {\n        const failedTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionFailure\");\n        const successTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionSuccess\");\n        const events = await this.vaultInstance.queryFilter({\n            address: this.vaultInstance.address,\n            topics: [\n                [\n                    failedTopic, successTopic\n                ],\n                null,\n                vaultHash\n            ]\n        });\n        if (events.length != 1)\n            return VaultTransactionStatus.UNKNOWN;\n        return events.length[0].topics[0] === successTopic ? VaultTransactionStatus.SUCCESS : VaultTransactionStatus.FAILED;\n    }\n    async loadConfig() {\n        const configTopic = this.vaultInstance.interface.getEventTopic(\"Configuration\");\n        const failedTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionFailure\");\n        const successTopic = this.vaultInstance.interface.getEventTopic(\"ExecutionSuccess\");\n        const events = await this.vaultInstance.queryFilter({\n            address: this.vaultInstance.address,\n            topics: [\n                [\n                    configTopic, failedTopic, successTopic\n                ]\n            ]\n        });\n        const currentConfig = {\n            implementation: constants.AddressZero,\n            signatureChecker: constants.AddressZero,\n            requestGuard: constants.AddressZero,\n            fallbackHandler: constants.AddressZero,\n            signers: [],\n            threshold: BigNumber.from(0),\n            nonce: BigNumber.from(-1)\n        };\n        for (const e of events) {\n            if (e.topics[0] == configTopic) {\n                const config = this.vaultInstance.interface.decodeEventLog(\"Configuration\", e.data, e.topics);\n                if (config.currentNonce >= currentConfig.nonce) {\n                    currentConfig.signers = config.signers;\n                    currentConfig.threshold = config.threshold;\n                    currentConfig.nonce = config.currentNonce;\n                    currentConfig.implementation = config.implementation;\n                    currentConfig.signatureChecker = config.signatureChecker;\n                    currentConfig.requestGuard = config.requestGuard;\n                    currentConfig.fallbackHandler = config.fallbackHandler;\n                }\n            }\n            else if (e.topics[0] == failedTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionFailure\", e.data, e.topics);\n                if (currentConfig.nonce <= exec.usedNonce) {\n                    currentConfig.nonce = exec.usedNonce.add(1);\n                }\n            }\n            else if (e.topics[0] == successTopic) {\n                const exec = this.vaultInstance.interface.decodeEventLog(\"ExecutionSuccess\", e.data, e.topics);\n                console.log(exec);\n                if (currentConfig.nonce <= exec.usedNonce) {\n                    currentConfig.nonce = exec.usedNonce.add(1);\n                }\n            }\n            else {\n                console.warn(\"Unknown log\");\n            }\n        }\n        if (currentConfig.nonce.eq(-1))\n            throw Error(\"could not load config\");\n        return currentConfig;\n    }\n    async pullWithLoader(ipfs, key, loader, encoding) {\n        if (!loader)\n            pullWithKeccak(ipfs, key, encoding);\n        return loader(key, encoding);\n    }\n    async fetchTxByHash(ipfs, txHash, loader) {\n        const hashData = await this.pullWithLoader(ipfs, txHash, loader);\n        const tx = await this.pullWithLoader(ipfs, hashData.substring(68), loader);\n        const txData = await this.pullWithLoader(ipfs, tx.substring(3 * 64, 4 * 64), loader);\n        const to = utils.getAddress(tx.substring(64 + 24, 2 * 64));\n        const value = BigNumber.from(\"0x\" + tx.substring(2 * 64, 3 * 64));\n        const data = \"0x\" + txData;\n        const operation = parseInt(tx.substring(4 * 64, 5 * 64), 16);\n        const minAvailableGas = BigNumber.from(\"0x\" + tx.substring(5 * 64, 6 * 64));\n        const nonce = BigNumber.from(\"0x\" + tx.substring(6 * 64, 7 * 64));\n        const metaHash = \"0x\" + tx.substring(7 * 64, 8 * 64);\n        let meta;\n        if (metaHash !== \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n            try {\n                meta = await this.pullWithLoader(ipfs, metaHash, loader, \"utf8\");\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        return {\n            to,\n            value: value.toHexString(),\n            data,\n            operation,\n            minAvailableGas: minAvailableGas.toHexString(),\n            nonce: nonce.toHexString(),\n            metaHash,\n            meta\n        };\n    }\n    async publishTx(ipfs, to, value, dataString, operation, nonce, meta) {\n        const metaHash = meta ? utils.solidityKeccak256([\"string\"], [meta]) : \"0x\";\n        if (meta) {\n            console.log(\"Publish meta data\");\n            {\n                const res = await ipfs.add(meta, { hashAlg: \"keccak-256\" });\n                console.log(`metadata: ${res.path}`);\n            }\n        }\n        const data = utils.arrayify(dataString);\n        const vaultDomain = new EIP712Domain({\n            chainId: 4,\n            verifyingContract: this.address,\n        });\n        const VaultTx = vaultDomain.createType('Transaction', [\n            { type: \"address\", name: \"to\" },\n            { type: \"uint256\", name: \"value\" },\n            { type: \"bytes\", name: \"data\" },\n            { type: \"uint8\", name: \"operation\" },\n            { type: \"uint256\", name: \"minAvailableGas\" },\n            { type: \"uint256\", name: \"nonce\" },\n            { type: \"bytes32\", name: \"metaHash\" },\n        ]);\n        const minAvailableGas = 0;\n        const vaultTx = new VaultTx({\n            to,\n            value: value.toHexString(),\n            data,\n            operation,\n            minAvailableGas,\n            nonce: nonce.toNumber(),\n            metaHash\n        });\n        // data\n        console.log(\"Publish data\");\n        {\n            const res = await ipfs.add(data, { hashAlg: \"keccak-256\" });\n            console.log(`metadata: ${res.path}`);\n        }\n        // TX_TYPEHASH, to, value, keccak256(data), operation, minAvailableGas, nonce\n        console.log(\"Publish tx\");\n        {\n            const res = await ipfs.add(vaultTx.encodeData(), { hashAlg: \"keccak-256\" });\n            console.log(`metadata: ${res.path}`);\n        }\n        // byte(0x19), byte(0x01), domainSeparator, txHash\n        console.log(\"Publish tx hash\");\n        {\n            const res = await ipfs.add(vaultTx.encode(), { hashAlg: \"keccak-256\" });\n            console.log(`metadata: ${res.path}`);\n        }\n        const txHash = \"0x\" + vaultTx.signHash().toString('hex');\n        const dataHash = await this.vaultInstance.generateTxHash(to, value, data, operation, minAvailableGas, nonce, metaHash);\n        if (txHash != dataHash)\n            throw Error(\"Invalid hash generated\");\n        return { vaultHash: txHash, metaHash };\n    }\n    async formatSignature(config, hashProvider, signatures, signer) {\n        let sigs;\n        let signers;\n        if (signatures) {\n            const dataHash = await hashProvider();\n            sigs = signatures.map((sig) => sig.slice(2));\n            let prevIndex = -1;\n            signers = signatures.map((sig) => {\n                const signer = utils.verifyMessage(utils.arrayify(dataHash), sig);\n                const signerIndex = config.signers.indexOf(signer, prevIndex + 1);\n                if (signerIndex <= prevIndex)\n                    throw Error(\"Invalid signer\");\n                prevIndex = signerIndex;\n                return signer;\n            });\n        }\n        else if (config.signers.length == 1) {\n            const singleSigner = await signer.getAddress();\n            if (config.signers.indexOf(singleSigner) < 0)\n                throw Error(\"Signer is not an owner\");\n            sigs = [utils.solidityPack([\"uint256\", \"uint256\", \"bytes1\"], [singleSigner, 0, \"0x01\"]).slice(2)];\n            signers = [singleSigner];\n        }\n        else {\n            throw Error(\"Cannot execute transaction due to missing confirmation\");\n        }\n        return { signaturesString: \"0x\" + sigs.join(\"\"), signers };\n    }\n    async buildExecData(transaction, signatures, signer) {\n        const config = await this.loadConfig();\n        if (!config.nonce.eq(transaction.nonce))\n            throw Error(\"Invalid nonce\");\n        const { signaturesString, signers } = await this.formatSignature(config, () => {\n            return this.vaultInstance.generateTxHash(transaction.to, transaction.value, transaction.data, transaction.operation, transaction.minAvailableGas, transaction.nonce, transaction.metaHash);\n        }, signatures, signer);\n        const validationData = await buildValidationData(config, signaturesString, signers);\n        //console.log(await this.vaultInstance.callStatic.execTransaction(to, value, data, operation, 0, config.nonce, \"0x\", validationData, true))\n        return {\n            wallet: this.address,\n            validationData,\n            transaction\n        };\n    }\n}\nexport class VaultSigner {\n    constructor(vault, signer) {\n        this.vault = vault;\n        this.signer = signer;\n    }\n    async signTx(transaction) {\n        const dataHash = await this.vault.vaultInstance.generateTxHash(transaction.to, transaction.value, transaction.data, transaction.operation, transaction.minAvailableGas, transaction.nonce, transaction.metaHash);\n        return prepareEthSignSignatureForSafe(await this.signer.signMessage(utils.arrayify(dataHash)));\n    }\n    async signTxFromHash(ipfs, txHash) {\n        const vaultTx = await this.vault.fetchTxByHash(ipfs, txHash);\n        return await this.signTx(vaultTx);\n    }\n    async signUpdate(newSigners, newThreshold, nonce) {\n        const config = await this.vault.loadConfig();\n        const dataHash = await this.vault.vaultInstance.generateConfigChangeHash(config.implementation, utils.solidityPack([\"address[]\"], [newSigners]), newThreshold, config.signatureChecker, config.requestGuard, config.fallbackHandler, \"0x\", nonce, \"0x\");\n        return prepareEthSignSignatureForSafe(await this.signer.signMessage(utils.arrayify(dataHash)));\n    }\n}\nexport class VaultExecutor {\n    constructor(vault, executor) {\n        this.vault = vault;\n        this.executor = executor;\n        this.writeVaultInstance = vault.vaultInstance.connect(executor);\n    }\n    async exec(to, value, data, operation, nonce, metaHash, signatures) {\n        const transaction = { to, value: value.toHexString(), data, operation, nonce: nonce.toHexString(), minAvailableGas: \"0x0\", metaHash };\n        const execData = await this.vault.buildExecData(transaction, signatures, this.executor);\n        //console.log(await this.vaultInstance.callStatic.execTransaction(to, value, data, operation, 0, config.nonce, \"0x\", validationData, true))\n        await this.writeVaultInstance.execTransaction(execData.transaction.to, execData.transaction.value, execData.transaction.data, execData.transaction.operation, execData.transaction.minAvailableGas, execData.transaction.nonce, execData.transaction.metaHash, execData.validationData, true);\n    }\n    async update(newSigners, newThreshold, nonce, signatures) {\n        const config = await this.vault.loadConfig();\n        if (!config.nonce.eq(nonce))\n            throw Error(\"Invalid nonce\");\n        const { signaturesString, signers } = await this.vault.formatSignature(config, () => {\n            return this.vault.vaultInstance.generateConfigChangeHash(config.implementation, utils.solidityPack([\"address[]\"], [newSigners]), newThreshold, config.signatureChecker, config.requestGuard, config.fallbackHandler, \"0x\", nonce, \"0x\");\n        }, signatures, this.executor);\n        const validationData = await buildValidationData(config, signaturesString, signers);\n        await this.writeVaultInstance.updateConfig(config.implementation, newSigners, newThreshold, config.signatureChecker, config.requestGuard, config.fallbackHandler, \"0x\", nonce, \"0x\", validationData);\n    }\n}\n//# sourceMappingURL=index.js.map","export const prepareEthSignSignatureForSafe = (signature) => {\n    return signature.replace(/00$/, \"1f\").replace(/1b$/, \"1f\").replace(/01$/, \"20\").replace(/1c$/, \"20\");\n};\n//# sourceMappingURL=signatures.js.map","import CID from 'cids';\nconst removeHexPrefix = (input) => input.toLowerCase().startsWith(\"0x\") ? input.slice(2) : input;\nexport const pullWithKeccak = async (ipfs, hashPart, encoding) => {\n    const multhash = Buffer.concat([Buffer.from(\"1b20\", \"hex\"), Buffer.from(removeHexPrefix(hashPart), \"hex\")]);\n    const cid = new CID(1, \"raw\", multhash, \"base32\");\n    let out = \"\";\n    for await (const file of ipfs.get(cid.toString())) {\n        if (!file.content)\n            continue;\n        const content = [];\n        for await (const chunk of file.content) {\n            content.push(chunk);\n        }\n        out += content.map(c => c.toString(encoding || 'hex')).join();\n    }\n    return out;\n};\n//# sourceMappingURL=ipfs.js.map","import { constants, utils } from 'ethers';\nexport const buildProof = async (txSigners, allSigners) => {\n    const ownersCopy = [...allSigners];\n    const indeces = txSigners.map(signer => {\n        const i = ownersCopy.indexOf(signer);\n        ownersCopy[i] = null;\n        return i;\n    });\n    const hashes = [];\n    const nodes = allSigners.map(signer => txSigners.indexOf(signer) < 0 ? utils.solidityKeccak256([\"uint256\"], [signer]) : \"0x0\");\n    let nodesCount = nodes.length;\n    while (nodesCount > 1) {\n        for (let i = 0; i < nodesCount; i += 2) {\n            let left = nodes[i];\n            let right;\n            if (i + 1 < nodesCount) {\n                right = nodes[i + 1];\n            }\n            else {\n                right = utils.solidityKeccak256([\"uint256\"], [\"0x0\"]);\n            }\n            if (left == \"0x0\" && right == \"0x0\") {\n                nodes[Math.floor(i / 2)] = \"0x0\";\n                continue;\n            }\n            if (left == \"0x0\") {\n                hashes.push(right);\n                nodes[Math.floor(i / 2)] = \"0x0\";\n                continue;\n            }\n            if (right == \"0x0\") {\n                hashes.push(left);\n                nodes[Math.floor(i / 2)] = \"0x0\";\n                continue;\n            }\n            nodes[Math.floor(i / 2)] = utils.solidityKeccak256([\"bytes32\", \"bytes32\"], [left, right]);\n        }\n        nodesCount = Math.ceil(nodesCount / 2);\n    }\n    return { indeces, hashes };\n};\nexport const buildValidationData = async (vaultConfig, signatures, signers) => {\n    const { indeces, hashes } = await buildProof(signers, vaultConfig.signers);\n    const validationData = utils.defaultAbiCoder.encode([\"uint256\", \"uint256\", \"address\", \"address\", \"uint256[]\", \"bytes32[]\", \"bytes\"], [vaultConfig.threshold, vaultConfig.signers.length, constants.AddressZero, constants.AddressZero, indeces, hashes, signatures]);\n    return validationData;\n};\n//# sourceMappingURL=proof.js.map","import { config } from 'dotenv'\n\nconfig()\n\nexport const chainNames: { [key: number]: string; } = {\n    1: \"mainnet\",\n    4: \"rinkeby\",\n    100: \"xdai\"\n}\n\nexport const rpcUrl: string = process.env.REACT_APP_RPC_URL!!\n\nexport const chainId: number = parseInt(process.env.REACT_APP_CHAIN_ID!!)\n\nexport const chainName: string = chainNames[chainId]\n\nexport const multiSendAddress: string = process.env.REACT_APP_MULTI_SEND_ADDRESS!!\n\nexport const factoryAddress: string = process.env.REACT_APP_FACTORY_ADDRESS!!\n\nexport const vaultImplementationAddress: string = process.env.REACT_APP_VAULT_IMPLEMENTATION_ADDRESS!!\n\nexport const relayUrl: string = process.env.REACT_APP_RELAY_URL!!\n\nexport const defaultAppUrl: string = process.env.REACT_APP_DEFAULT_APP_URL!!"],"sourceRoot":""}